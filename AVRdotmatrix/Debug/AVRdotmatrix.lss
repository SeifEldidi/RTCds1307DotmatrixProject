
AVRdotmatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000378  00800060  00002518  000025ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008003d8  008003d8  00002924  2**0
                  ALLOC
  3 .debug_aranges 00000208  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000347  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dd2  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d1e  00000000  00000000  00004c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000233c  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00007ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006aa  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036c  00000000  00000000  0000863a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00017efa  00000000  00000000  000089a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000208a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 11 	call	0x23cc	; 0x23cc <main>
      8a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__mulsf3>:
      92:	a0 e2       	ldi	r26, 0x20	; 32
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
      9e:	69 83       	std	Y+1, r22	; 0x01
      a0:	7a 83       	std	Y+2, r23	; 0x02
      a2:	8b 83       	std	Y+3, r24	; 0x03
      a4:	9c 83       	std	Y+4, r25	; 0x04
      a6:	2d 83       	std	Y+5, r18	; 0x05
      a8:	3e 83       	std	Y+6, r19	; 0x06
      aa:	4f 83       	std	Y+7, r20	; 0x07
      ac:	58 87       	std	Y+8, r21	; 0x08
      ae:	ce 01       	movw	r24, r28
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	be 01       	movw	r22, r28
      b4:	67 5f       	subi	r22, 0xF7	; 247
      b6:	7f 4f       	sbci	r23, 0xFF	; 255
      b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__unpack_f>
      bc:	ce 01       	movw	r24, r28
      be:	05 96       	adiw	r24, 0x05	; 5
      c0:	be 01       	movw	r22, r28
      c2:	6f 5e       	subi	r22, 0xEF	; 239
      c4:	7f 4f       	sbci	r23, 0xFF	; 255
      c6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__unpack_f>
      ca:	99 85       	ldd	r25, Y+9	; 0x09
      cc:	92 30       	cpi	r25, 0x02	; 2
      ce:	88 f0       	brcs	.+34     	; 0xf2 <__mulsf3+0x60>
      d0:	89 89       	ldd	r24, Y+17	; 0x11
      d2:	82 30       	cpi	r24, 0x02	; 2
      d4:	c8 f0       	brcs	.+50     	; 0x108 <__mulsf3+0x76>
      d6:	94 30       	cpi	r25, 0x04	; 4
      d8:	19 f4       	brne	.+6      	; 0xe0 <__mulsf3+0x4e>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	51 f4       	brne	.+20     	; 0xf2 <__mulsf3+0x60>
      de:	04 c0       	rjmp	.+8      	; 0xe8 <__mulsf3+0x56>
      e0:	84 30       	cpi	r24, 0x04	; 4
      e2:	29 f4       	brne	.+10     	; 0xee <__mulsf3+0x5c>
      e4:	92 30       	cpi	r25, 0x02	; 2
      e6:	81 f4       	brne	.+32     	; 0x108 <__mulsf3+0x76>
      e8:	84 e8       	ldi	r24, 0x84	; 132
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	c6 c0       	rjmp	.+396    	; 0x27a <__mulsf3+0x1e8>
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	49 f4       	brne	.+18     	; 0x104 <__mulsf3+0x72>
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	9a 85       	ldd	r25, Y+10	; 0x0a
      f6:	8a 89       	ldd	r24, Y+18	; 0x12
      f8:	98 13       	cpse	r25, r24
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	2a 87       	std	Y+10, r18	; 0x0a
      fe:	ce 01       	movw	r24, r28
     100:	09 96       	adiw	r24, 0x09	; 9
     102:	bb c0       	rjmp	.+374    	; 0x27a <__mulsf3+0x1e8>
     104:	82 30       	cpi	r24, 0x02	; 2
     106:	49 f4       	brne	.+18     	; 0x11a <__mulsf3+0x88>
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	9a 85       	ldd	r25, Y+10	; 0x0a
     10c:	8a 89       	ldd	r24, Y+18	; 0x12
     10e:	98 13       	cpse	r25, r24
     110:	21 e0       	ldi	r18, 0x01	; 1
     112:	2a 8b       	std	Y+18, r18	; 0x12
     114:	ce 01       	movw	r24, r28
     116:	41 96       	adiw	r24, 0x11	; 17
     118:	b0 c0       	rjmp	.+352    	; 0x27a <__mulsf3+0x1e8>
     11a:	2d 84       	ldd	r2, Y+13	; 0x0d
     11c:	3e 84       	ldd	r3, Y+14	; 0x0e
     11e:	4f 84       	ldd	r4, Y+15	; 0x0f
     120:	58 88       	ldd	r5, Y+16	; 0x10
     122:	6d 88       	ldd	r6, Y+21	; 0x15
     124:	7e 88       	ldd	r7, Y+22	; 0x16
     126:	8f 88       	ldd	r8, Y+23	; 0x17
     128:	98 8c       	ldd	r9, Y+24	; 0x18
     12a:	ee 24       	eor	r14, r14
     12c:	ff 24       	eor	r15, r15
     12e:	87 01       	movw	r16, r14
     130:	aa 24       	eor	r10, r10
     132:	bb 24       	eor	r11, r11
     134:	65 01       	movw	r12, r10
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	e0 e0       	ldi	r30, 0x00	; 0
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	c1 01       	movw	r24, r2
     144:	81 70       	andi	r24, 0x01	; 1
     146:	90 70       	andi	r25, 0x00	; 0
     148:	89 2b       	or	r24, r25
     14a:	e9 f0       	breq	.+58     	; 0x186 <__mulsf3+0xf4>
     14c:	e6 0c       	add	r14, r6
     14e:	f7 1c       	adc	r15, r7
     150:	08 1d       	adc	r16, r8
     152:	19 1d       	adc	r17, r9
     154:	9a 01       	movw	r18, r20
     156:	ab 01       	movw	r20, r22
     158:	2a 0d       	add	r18, r10
     15a:	3b 1d       	adc	r19, r11
     15c:	4c 1d       	adc	r20, r12
     15e:	5d 1d       	adc	r21, r13
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e6 14       	cp	r14, r6
     16a:	f7 04       	cpc	r15, r7
     16c:	08 05       	cpc	r16, r8
     16e:	19 05       	cpc	r17, r9
     170:	20 f4       	brcc	.+8      	; 0x17a <__mulsf3+0xe8>
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	ba 01       	movw	r22, r20
     17c:	a9 01       	movw	r20, r18
     17e:	48 0f       	add	r20, r24
     180:	59 1f       	adc	r21, r25
     182:	6a 1f       	adc	r22, r26
     184:	7b 1f       	adc	r23, r27
     186:	aa 0c       	add	r10, r10
     188:	bb 1c       	adc	r11, r11
     18a:	cc 1c       	adc	r12, r12
     18c:	dd 1c       	adc	r13, r13
     18e:	97 fe       	sbrs	r9, 7
     190:	08 c0       	rjmp	.+16     	; 0x1a2 <__mulsf3+0x110>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	a8 2a       	or	r10, r24
     19c:	b9 2a       	or	r11, r25
     19e:	ca 2a       	or	r12, r26
     1a0:	db 2a       	or	r13, r27
     1a2:	31 96       	adiw	r30, 0x01	; 1
     1a4:	e0 32       	cpi	r30, 0x20	; 32
     1a6:	f1 05       	cpc	r31, r1
     1a8:	49 f0       	breq	.+18     	; 0x1bc <__mulsf3+0x12a>
     1aa:	66 0c       	add	r6, r6
     1ac:	77 1c       	adc	r7, r7
     1ae:	88 1c       	adc	r8, r8
     1b0:	99 1c       	adc	r9, r9
     1b2:	56 94       	lsr	r5
     1b4:	47 94       	ror	r4
     1b6:	37 94       	ror	r3
     1b8:	27 94       	ror	r2
     1ba:	c3 cf       	rjmp	.-122    	; 0x142 <__mulsf3+0xb0>
     1bc:	fa 85       	ldd	r31, Y+10	; 0x0a
     1be:	ea 89       	ldd	r30, Y+18	; 0x12
     1c0:	2b 89       	ldd	r18, Y+19	; 0x13
     1c2:	3c 89       	ldd	r19, Y+20	; 0x14
     1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c8:	28 0f       	add	r18, r24
     1ca:	39 1f       	adc	r19, r25
     1cc:	2e 5f       	subi	r18, 0xFE	; 254
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	17 c0       	rjmp	.+46     	; 0x200 <__mulsf3+0x16e>
     1d2:	ca 01       	movw	r24, r20
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	90 70       	andi	r25, 0x00	; 0
     1d8:	89 2b       	or	r24, r25
     1da:	61 f0       	breq	.+24     	; 0x1f4 <__mulsf3+0x162>
     1dc:	16 95       	lsr	r17
     1de:	07 95       	ror	r16
     1e0:	f7 94       	ror	r15
     1e2:	e7 94       	ror	r14
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e8       	ldi	r27, 0x80	; 128
     1ec:	e8 2a       	or	r14, r24
     1ee:	f9 2a       	or	r15, r25
     1f0:	0a 2b       	or	r16, r26
     1f2:	1b 2b       	or	r17, r27
     1f4:	76 95       	lsr	r23
     1f6:	67 95       	ror	r22
     1f8:	57 95       	ror	r21
     1fa:	47 95       	ror	r20
     1fc:	2f 5f       	subi	r18, 0xFF	; 255
     1fe:	3f 4f       	sbci	r19, 0xFF	; 255
     200:	77 fd       	sbrc	r23, 7
     202:	e7 cf       	rjmp	.-50     	; 0x1d2 <__mulsf3+0x140>
     204:	0c c0       	rjmp	.+24     	; 0x21e <__mulsf3+0x18c>
     206:	44 0f       	add	r20, r20
     208:	55 1f       	adc	r21, r21
     20a:	66 1f       	adc	r22, r22
     20c:	77 1f       	adc	r23, r23
     20e:	17 fd       	sbrc	r17, 7
     210:	41 60       	ori	r20, 0x01	; 1
     212:	ee 0c       	add	r14, r14
     214:	ff 1c       	adc	r15, r15
     216:	00 1f       	adc	r16, r16
     218:	11 1f       	adc	r17, r17
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	30 40       	sbci	r19, 0x00	; 0
     21e:	40 30       	cpi	r20, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	59 07       	cpc	r21, r25
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	69 07       	cpc	r22, r25
     228:	90 e4       	ldi	r25, 0x40	; 64
     22a:	79 07       	cpc	r23, r25
     22c:	60 f3       	brcs	.-40     	; 0x206 <__mulsf3+0x174>
     22e:	2b 8f       	std	Y+27, r18	; 0x1b
     230:	3c 8f       	std	Y+28, r19	; 0x1c
     232:	db 01       	movw	r26, r22
     234:	ca 01       	movw	r24, r20
     236:	8f 77       	andi	r24, 0x7F	; 127
     238:	90 70       	andi	r25, 0x00	; 0
     23a:	a0 70       	andi	r26, 0x00	; 0
     23c:	b0 70       	andi	r27, 0x00	; 0
     23e:	80 34       	cpi	r24, 0x40	; 64
     240:	91 05       	cpc	r25, r1
     242:	a1 05       	cpc	r26, r1
     244:	b1 05       	cpc	r27, r1
     246:	61 f4       	brne	.+24     	; 0x260 <__mulsf3+0x1ce>
     248:	47 fd       	sbrc	r20, 7
     24a:	0a c0       	rjmp	.+20     	; 0x260 <__mulsf3+0x1ce>
     24c:	e1 14       	cp	r14, r1
     24e:	f1 04       	cpc	r15, r1
     250:	01 05       	cpc	r16, r1
     252:	11 05       	cpc	r17, r1
     254:	29 f0       	breq	.+10     	; 0x260 <__mulsf3+0x1ce>
     256:	40 5c       	subi	r20, 0xC0	; 192
     258:	5f 4f       	sbci	r21, 0xFF	; 255
     25a:	6f 4f       	sbci	r22, 0xFF	; 255
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	40 78       	andi	r20, 0x80	; 128
     260:	1a 8e       	std	Y+26, r1	; 0x1a
     262:	fe 17       	cp	r31, r30
     264:	11 f0       	breq	.+4      	; 0x26a <__mulsf3+0x1d8>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	8a 8f       	std	Y+26, r24	; 0x1a
     26a:	4d 8f       	std	Y+29, r20	; 0x1d
     26c:	5e 8f       	std	Y+30, r21	; 0x1e
     26e:	6f 8f       	std	Y+31, r22	; 0x1f
     270:	78 a3       	std	Y+32, r23	; 0x20
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	89 8f       	std	Y+25, r24	; 0x19
     276:	ce 01       	movw	r24, r28
     278:	49 96       	adiw	r24, 0x19	; 25
     27a:	0e 94 97 01 	call	0x32e	; 0x32e <__pack_f>
     27e:	a0 96       	adiw	r28, 0x20	; 32
     280:	e2 e1       	ldi	r30, 0x12	; 18
     282:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

00000286 <__fixsfsi>:
     286:	ac e0       	ldi	r26, 0x0C	; 12
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e9 e4       	ldi	r30, 0x49	; 73
     28c:	f1 e0       	ldi	r31, 0x01	; 1
     28e:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__+0x20>
     292:	69 83       	std	Y+1, r22	; 0x01
     294:	7a 83       	std	Y+2, r23	; 0x02
     296:	8b 83       	std	Y+3, r24	; 0x03
     298:	9c 83       	std	Y+4, r25	; 0x04
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	be 01       	movw	r22, r28
     2a0:	6b 5f       	subi	r22, 0xFB	; 251
     2a2:	7f 4f       	sbci	r23, 0xFF	; 255
     2a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__unpack_f>
     2a8:	8d 81       	ldd	r24, Y+5	; 0x05
     2aa:	82 30       	cpi	r24, 0x02	; 2
     2ac:	61 f1       	breq	.+88     	; 0x306 <__fixsfsi+0x80>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	50 f1       	brcs	.+84     	; 0x306 <__fixsfsi+0x80>
     2b2:	84 30       	cpi	r24, 0x04	; 4
     2b4:	21 f4       	brne	.+8      	; 0x2be <__fixsfsi+0x38>
     2b6:	8e 81       	ldd	r24, Y+6	; 0x06
     2b8:	88 23       	and	r24, r24
     2ba:	51 f1       	breq	.+84     	; 0x310 <__fixsfsi+0x8a>
     2bc:	2e c0       	rjmp	.+92     	; 0x31a <__fixsfsi+0x94>
     2be:	2f 81       	ldd	r18, Y+7	; 0x07
     2c0:	38 85       	ldd	r19, Y+8	; 0x08
     2c2:	37 fd       	sbrc	r19, 7
     2c4:	20 c0       	rjmp	.+64     	; 0x306 <__fixsfsi+0x80>
     2c6:	6e 81       	ldd	r22, Y+6	; 0x06
     2c8:	2f 31       	cpi	r18, 0x1F	; 31
     2ca:	31 05       	cpc	r19, r1
     2cc:	1c f0       	brlt	.+6      	; 0x2d4 <__fixsfsi+0x4e>
     2ce:	66 23       	and	r22, r22
     2d0:	f9 f0       	breq	.+62     	; 0x310 <__fixsfsi+0x8a>
     2d2:	23 c0       	rjmp	.+70     	; 0x31a <__fixsfsi+0x94>
     2d4:	8e e1       	ldi	r24, 0x1E	; 30
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	82 1b       	sub	r24, r18
     2da:	93 0b       	sbc	r25, r19
     2dc:	29 85       	ldd	r18, Y+9	; 0x09
     2de:	3a 85       	ldd	r19, Y+10	; 0x0a
     2e0:	4b 85       	ldd	r20, Y+11	; 0x0b
     2e2:	5c 85       	ldd	r21, Y+12	; 0x0c
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <__fixsfsi+0x68>
     2e6:	56 95       	lsr	r21
     2e8:	47 95       	ror	r20
     2ea:	37 95       	ror	r19
     2ec:	27 95       	ror	r18
     2ee:	8a 95       	dec	r24
     2f0:	d2 f7       	brpl	.-12     	; 0x2e6 <__fixsfsi+0x60>
     2f2:	66 23       	and	r22, r22
     2f4:	b1 f0       	breq	.+44     	; 0x322 <__fixsfsi+0x9c>
     2f6:	50 95       	com	r21
     2f8:	40 95       	com	r20
     2fa:	30 95       	com	r19
     2fc:	21 95       	neg	r18
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	4f 4f       	sbci	r20, 0xFF	; 255
     302:	5f 4f       	sbci	r21, 0xFF	; 255
     304:	0e c0       	rjmp	.+28     	; 0x322 <__fixsfsi+0x9c>
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	09 c0       	rjmp	.+18     	; 0x322 <__fixsfsi+0x9c>
     310:	2f ef       	ldi	r18, 0xFF	; 255
     312:	3f ef       	ldi	r19, 0xFF	; 255
     314:	4f ef       	ldi	r20, 0xFF	; 255
     316:	5f e7       	ldi	r21, 0x7F	; 127
     318:	04 c0       	rjmp	.+8      	; 0x322 <__fixsfsi+0x9c>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e8       	ldi	r21, 0x80	; 128
     322:	b9 01       	movw	r22, r18
     324:	ca 01       	movw	r24, r20
     326:	2c 96       	adiw	r28, 0x0c	; 12
     328:	e2 e0       	ldi	r30, 0x02	; 2
     32a:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__+0x20>

0000032e <__pack_f>:
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	fc 01       	movw	r30, r24
     33a:	e4 80       	ldd	r14, Z+4	; 0x04
     33c:	f5 80       	ldd	r15, Z+5	; 0x05
     33e:	06 81       	ldd	r16, Z+6	; 0x06
     340:	17 81       	ldd	r17, Z+7	; 0x07
     342:	d1 80       	ldd	r13, Z+1	; 0x01
     344:	80 81       	ld	r24, Z
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	48 f4       	brcc	.+18     	; 0x35c <__pack_f+0x2e>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a0 e1       	ldi	r26, 0x10	; 16
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e8 2a       	or	r14, r24
     354:	f9 2a       	or	r15, r25
     356:	0a 2b       	or	r16, r26
     358:	1b 2b       	or	r17, r27
     35a:	a5 c0       	rjmp	.+330    	; 0x4a6 <__pack_f+0x178>
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	09 f4       	brne	.+2      	; 0x362 <__pack_f+0x34>
     360:	9f c0       	rjmp	.+318    	; 0x4a0 <__pack_f+0x172>
     362:	82 30       	cpi	r24, 0x02	; 2
     364:	21 f4       	brne	.+8      	; 0x36e <__pack_f+0x40>
     366:	ee 24       	eor	r14, r14
     368:	ff 24       	eor	r15, r15
     36a:	87 01       	movw	r16, r14
     36c:	05 c0       	rjmp	.+10     	; 0x378 <__pack_f+0x4a>
     36e:	e1 14       	cp	r14, r1
     370:	f1 04       	cpc	r15, r1
     372:	01 05       	cpc	r16, r1
     374:	11 05       	cpc	r17, r1
     376:	19 f4       	brne	.+6      	; 0x37e <__pack_f+0x50>
     378:	e0 e0       	ldi	r30, 0x00	; 0
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	96 c0       	rjmp	.+300    	; 0x4aa <__pack_f+0x17c>
     37e:	62 81       	ldd	r22, Z+2	; 0x02
     380:	73 81       	ldd	r23, Z+3	; 0x03
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	62 38       	cpi	r22, 0x82	; 130
     386:	79 07       	cpc	r23, r25
     388:	0c f0       	brlt	.+2      	; 0x38c <__pack_f+0x5e>
     38a:	5b c0       	rjmp	.+182    	; 0x442 <__pack_f+0x114>
     38c:	22 e8       	ldi	r18, 0x82	; 130
     38e:	3f ef       	ldi	r19, 0xFF	; 255
     390:	26 1b       	sub	r18, r22
     392:	37 0b       	sbc	r19, r23
     394:	2a 31       	cpi	r18, 0x1A	; 26
     396:	31 05       	cpc	r19, r1
     398:	2c f0       	brlt	.+10     	; 0x3a4 <__pack_f+0x76>
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	2a c0       	rjmp	.+84     	; 0x3f8 <__pack_f+0xca>
     3a4:	b8 01       	movw	r22, r16
     3a6:	a7 01       	movw	r20, r14
     3a8:	02 2e       	mov	r0, r18
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <__pack_f+0x86>
     3ac:	76 95       	lsr	r23
     3ae:	67 95       	ror	r22
     3b0:	57 95       	ror	r21
     3b2:	47 95       	ror	r20
     3b4:	0a 94       	dec	r0
     3b6:	d2 f7       	brpl	.-12     	; 0x3ac <__pack_f+0x7e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <__pack_f+0x9c>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	aa 1f       	adc	r26, r26
     3c8:	bb 1f       	adc	r27, r27
     3ca:	2a 95       	dec	r18
     3cc:	d2 f7       	brpl	.-12     	; 0x3c2 <__pack_f+0x94>
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	a1 09       	sbc	r26, r1
     3d2:	b1 09       	sbc	r27, r1
     3d4:	8e 21       	and	r24, r14
     3d6:	9f 21       	and	r25, r15
     3d8:	a0 23       	and	r26, r16
     3da:	b1 23       	and	r27, r17
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	a1 05       	cpc	r26, r1
     3e0:	b1 05       	cpc	r27, r1
     3e2:	21 f0       	breq	.+8      	; 0x3ec <__pack_f+0xbe>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	9a 01       	movw	r18, r20
     3ee:	ab 01       	movw	r20, r22
     3f0:	28 2b       	or	r18, r24
     3f2:	39 2b       	or	r19, r25
     3f4:	4a 2b       	or	r20, r26
     3f6:	5b 2b       	or	r21, r27
     3f8:	da 01       	movw	r26, r20
     3fa:	c9 01       	movw	r24, r18
     3fc:	8f 77       	andi	r24, 0x7F	; 127
     3fe:	90 70       	andi	r25, 0x00	; 0
     400:	a0 70       	andi	r26, 0x00	; 0
     402:	b0 70       	andi	r27, 0x00	; 0
     404:	80 34       	cpi	r24, 0x40	; 64
     406:	91 05       	cpc	r25, r1
     408:	a1 05       	cpc	r26, r1
     40a:	b1 05       	cpc	r27, r1
     40c:	39 f4       	brne	.+14     	; 0x41c <__pack_f+0xee>
     40e:	27 ff       	sbrs	r18, 7
     410:	09 c0       	rjmp	.+18     	; 0x424 <__pack_f+0xf6>
     412:	20 5c       	subi	r18, 0xC0	; 192
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	4f 4f       	sbci	r20, 0xFF	; 255
     418:	5f 4f       	sbci	r21, 0xFF	; 255
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__pack_f+0xf6>
     41c:	21 5c       	subi	r18, 0xC1	; 193
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	4f 4f       	sbci	r20, 0xFF	; 255
     422:	5f 4f       	sbci	r21, 0xFF	; 255
     424:	e0 e0       	ldi	r30, 0x00	; 0
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	20 30       	cpi	r18, 0x00	; 0
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	3a 07       	cpc	r19, r26
     42e:	a0 e0       	ldi	r26, 0x00	; 0
     430:	4a 07       	cpc	r20, r26
     432:	a0 e4       	ldi	r26, 0x40	; 64
     434:	5a 07       	cpc	r21, r26
     436:	10 f0       	brcs	.+4      	; 0x43c <__pack_f+0x10e>
     438:	e1 e0       	ldi	r30, 0x01	; 1
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	79 01       	movw	r14, r18
     43e:	8a 01       	movw	r16, r20
     440:	27 c0       	rjmp	.+78     	; 0x490 <__pack_f+0x162>
     442:	60 38       	cpi	r22, 0x80	; 128
     444:	71 05       	cpc	r23, r1
     446:	64 f5       	brge	.+88     	; 0x4a0 <__pack_f+0x172>
     448:	fb 01       	movw	r30, r22
     44a:	e1 58       	subi	r30, 0x81	; 129
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	d8 01       	movw	r26, r16
     450:	c7 01       	movw	r24, r14
     452:	8f 77       	andi	r24, 0x7F	; 127
     454:	90 70       	andi	r25, 0x00	; 0
     456:	a0 70       	andi	r26, 0x00	; 0
     458:	b0 70       	andi	r27, 0x00	; 0
     45a:	80 34       	cpi	r24, 0x40	; 64
     45c:	91 05       	cpc	r25, r1
     45e:	a1 05       	cpc	r26, r1
     460:	b1 05       	cpc	r27, r1
     462:	39 f4       	brne	.+14     	; 0x472 <__pack_f+0x144>
     464:	e7 fe       	sbrs	r14, 7
     466:	0d c0       	rjmp	.+26     	; 0x482 <__pack_f+0x154>
     468:	80 e4       	ldi	r24, 0x40	; 64
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	a0 e0       	ldi	r26, 0x00	; 0
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	04 c0       	rjmp	.+8      	; 0x47a <__pack_f+0x14c>
     472:	8f e3       	ldi	r24, 0x3F	; 63
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	a0 e0       	ldi	r26, 0x00	; 0
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	e8 0e       	add	r14, r24
     47c:	f9 1e       	adc	r15, r25
     47e:	0a 1f       	adc	r16, r26
     480:	1b 1f       	adc	r17, r27
     482:	17 ff       	sbrs	r17, 7
     484:	05 c0       	rjmp	.+10     	; 0x490 <__pack_f+0x162>
     486:	16 95       	lsr	r17
     488:	07 95       	ror	r16
     48a:	f7 94       	ror	r15
     48c:	e7 94       	ror	r14
     48e:	31 96       	adiw	r30, 0x01	; 1
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	16 95       	lsr	r17
     494:	07 95       	ror	r16
     496:	f7 94       	ror	r15
     498:	e7 94       	ror	r14
     49a:	8a 95       	dec	r24
     49c:	d1 f7       	brne	.-12     	; 0x492 <__pack_f+0x164>
     49e:	05 c0       	rjmp	.+10     	; 0x4aa <__pack_f+0x17c>
     4a0:	ee 24       	eor	r14, r14
     4a2:	ff 24       	eor	r15, r15
     4a4:	87 01       	movw	r16, r14
     4a6:	ef ef       	ldi	r30, 0xFF	; 255
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	6e 2f       	mov	r22, r30
     4ac:	67 95       	ror	r22
     4ae:	66 27       	eor	r22, r22
     4b0:	67 95       	ror	r22
     4b2:	90 2f       	mov	r25, r16
     4b4:	9f 77       	andi	r25, 0x7F	; 127
     4b6:	d7 94       	ror	r13
     4b8:	dd 24       	eor	r13, r13
     4ba:	d7 94       	ror	r13
     4bc:	8e 2f       	mov	r24, r30
     4be:	86 95       	lsr	r24
     4c0:	49 2f       	mov	r20, r25
     4c2:	46 2b       	or	r20, r22
     4c4:	58 2f       	mov	r21, r24
     4c6:	5d 29       	or	r21, r13
     4c8:	b7 01       	movw	r22, r14
     4ca:	ca 01       	movw	r24, r20
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	08 95       	ret

000004d8 <__unpack_f>:
     4d8:	fc 01       	movw	r30, r24
     4da:	db 01       	movw	r26, r22
     4dc:	40 81       	ld	r20, Z
     4de:	51 81       	ldd	r21, Z+1	; 0x01
     4e0:	22 81       	ldd	r18, Z+2	; 0x02
     4e2:	62 2f       	mov	r22, r18
     4e4:	6f 77       	andi	r22, 0x7F	; 127
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	22 1f       	adc	r18, r18
     4ea:	22 27       	eor	r18, r18
     4ec:	22 1f       	adc	r18, r18
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	89 2f       	mov	r24, r25
     4f2:	88 0f       	add	r24, r24
     4f4:	82 2b       	or	r24, r18
     4f6:	28 2f       	mov	r18, r24
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	99 1f       	adc	r25, r25
     4fc:	99 27       	eor	r25, r25
     4fe:	99 1f       	adc	r25, r25
     500:	11 96       	adiw	r26, 0x01	; 1
     502:	9c 93       	st	X, r25
     504:	11 97       	sbiw	r26, 0x01	; 1
     506:	21 15       	cp	r18, r1
     508:	31 05       	cpc	r19, r1
     50a:	a9 f5       	brne	.+106    	; 0x576 <__unpack_f+0x9e>
     50c:	41 15       	cp	r20, r1
     50e:	51 05       	cpc	r21, r1
     510:	61 05       	cpc	r22, r1
     512:	71 05       	cpc	r23, r1
     514:	11 f4       	brne	.+4      	; 0x51a <__unpack_f+0x42>
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	37 c0       	rjmp	.+110    	; 0x588 <__unpack_f+0xb0>
     51a:	82 e8       	ldi	r24, 0x82	; 130
     51c:	9f ef       	ldi	r25, 0xFF	; 255
     51e:	13 96       	adiw	r26, 0x03	; 3
     520:	9c 93       	st	X, r25
     522:	8e 93       	st	-X, r24
     524:	12 97       	sbiw	r26, 0x02	; 2
     526:	9a 01       	movw	r18, r20
     528:	ab 01       	movw	r20, r22
     52a:	67 e0       	ldi	r22, 0x07	; 7
     52c:	22 0f       	add	r18, r18
     52e:	33 1f       	adc	r19, r19
     530:	44 1f       	adc	r20, r20
     532:	55 1f       	adc	r21, r21
     534:	6a 95       	dec	r22
     536:	d1 f7       	brne	.-12     	; 0x52c <__unpack_f+0x54>
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	8c 93       	st	X, r24
     53c:	0d c0       	rjmp	.+26     	; 0x558 <__unpack_f+0x80>
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	44 1f       	adc	r20, r20
     544:	55 1f       	adc	r21, r21
     546:	12 96       	adiw	r26, 0x02	; 2
     548:	8d 91       	ld	r24, X+
     54a:	9c 91       	ld	r25, X
     54c:	13 97       	sbiw	r26, 0x03	; 3
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	13 96       	adiw	r26, 0x03	; 3
     552:	9c 93       	st	X, r25
     554:	8e 93       	st	-X, r24
     556:	12 97       	sbiw	r26, 0x02	; 2
     558:	20 30       	cpi	r18, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	38 07       	cpc	r19, r24
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	48 07       	cpc	r20, r24
     562:	80 e4       	ldi	r24, 0x40	; 64
     564:	58 07       	cpc	r21, r24
     566:	58 f3       	brcs	.-42     	; 0x53e <__unpack_f+0x66>
     568:	14 96       	adiw	r26, 0x04	; 4
     56a:	2d 93       	st	X+, r18
     56c:	3d 93       	st	X+, r19
     56e:	4d 93       	st	X+, r20
     570:	5c 93       	st	X, r21
     572:	17 97       	sbiw	r26, 0x07	; 7
     574:	08 95       	ret
     576:	2f 3f       	cpi	r18, 0xFF	; 255
     578:	31 05       	cpc	r19, r1
     57a:	79 f4       	brne	.+30     	; 0x59a <__unpack_f+0xc2>
     57c:	41 15       	cp	r20, r1
     57e:	51 05       	cpc	r21, r1
     580:	61 05       	cpc	r22, r1
     582:	71 05       	cpc	r23, r1
     584:	19 f4       	brne	.+6      	; 0x58c <__unpack_f+0xb4>
     586:	84 e0       	ldi	r24, 0x04	; 4
     588:	8c 93       	st	X, r24
     58a:	08 95       	ret
     58c:	64 ff       	sbrs	r22, 4
     58e:	03 c0       	rjmp	.+6      	; 0x596 <__unpack_f+0xbe>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	8c 93       	st	X, r24
     594:	12 c0       	rjmp	.+36     	; 0x5ba <__unpack_f+0xe2>
     596:	1c 92       	st	X, r1
     598:	10 c0       	rjmp	.+32     	; 0x5ba <__unpack_f+0xe2>
     59a:	2f 57       	subi	r18, 0x7F	; 127
     59c:	30 40       	sbci	r19, 0x00	; 0
     59e:	13 96       	adiw	r26, 0x03	; 3
     5a0:	3c 93       	st	X, r19
     5a2:	2e 93       	st	-X, r18
     5a4:	12 97       	sbiw	r26, 0x02	; 2
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	8c 93       	st	X, r24
     5aa:	87 e0       	ldi	r24, 0x07	; 7
     5ac:	44 0f       	add	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	66 1f       	adc	r22, r22
     5b2:	77 1f       	adc	r23, r23
     5b4:	8a 95       	dec	r24
     5b6:	d1 f7       	brne	.-12     	; 0x5ac <__unpack_f+0xd4>
     5b8:	70 64       	ori	r23, 0x40	; 64
     5ba:	14 96       	adiw	r26, 0x04	; 4
     5bc:	4d 93       	st	X+, r20
     5be:	5d 93       	st	X+, r21
     5c0:	6d 93       	st	X+, r22
     5c2:	7c 93       	st	X, r23
     5c4:	17 97       	sbiw	r26, 0x07	; 7
     5c6:	08 95       	ret

000005c8 <Pow_4>:
#if I2C_RECIEVE_INTERRUPT==FEATURE_ENABLE
	void (*I2C_RX_CALLBACK_PTR)(void)=NULL;
#endif

static int32 Pow_4(int8 exp)
{
     5c8:	df 93       	push	r29
     5ca:	cf 93       	push	r28
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <Pow_4+0x6>
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <Pow_4+0x8>
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <Pow_4+0xa>
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	8e 83       	std	Y+6, r24	; 0x06
	int8 Counter=0;
     5d8:	1d 82       	std	Y+5, r1	; 0x05
	int32 ret=1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	a0 e0       	ldi	r26, 0x00	; 0
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	89 83       	std	Y+1, r24	; 0x01
     5e4:	9a 83       	std	Y+2, r25	; 0x02
     5e6:	ab 83       	std	Y+3, r26	; 0x03
     5e8:	bc 83       	std	Y+4, r27	; 0x04
	for(Counter=0;Counter<=exp-1;Counter++)
     5ea:	1d 82       	std	Y+5, r1	; 0x05
     5ec:	13 c0       	rjmp	.+38     	; 0x614 <Pow_4+0x4c>
		ret*=4;
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	ab 81       	ldd	r26, Y+3	; 0x03
     5f4:	bc 81       	ldd	r27, Y+4	; 0x04
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	aa 1f       	adc	r26, r26
     5fc:	bb 1f       	adc	r27, r27
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	aa 1f       	adc	r26, r26
     604:	bb 1f       	adc	r27, r27
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	ab 83       	std	Y+3, r26	; 0x03
     60c:	bc 83       	std	Y+4, r27	; 0x04

static int32 Pow_4(int8 exp)
{
	int8 Counter=0;
	int32 ret=1;
	for(Counter=0;Counter<=exp-1;Counter++)
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	8f 5f       	subi	r24, 0xFF	; 255
     612:	8d 83       	std	Y+5, r24	; 0x05
     614:	8d 81       	ldd	r24, Y+5	; 0x05
     616:	28 2f       	mov	r18, r24
     618:	33 27       	eor	r19, r19
     61a:	27 fd       	sbrc	r18, 7
     61c:	30 95       	com	r19
     61e:	8e 81       	ldd	r24, Y+6	; 0x06
     620:	99 27       	eor	r25, r25
     622:	87 fd       	sbrc	r24, 7
     624:	90 95       	com	r25
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	04 f7       	brge	.-64     	; 0x5ee <Pow_4+0x26>
		ret*=4;
	return ret;
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	ab 81       	ldd	r26, Y+3	; 0x03
     634:	bc 81       	ldd	r27, Y+4	; 0x04
}
     636:	bc 01       	movw	r22, r24
     638:	cd 01       	movw	r24, r26
     63a:	26 96       	adiw	r28, 0x06	; 6
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <I2C_WRITE_BYTE>:

void I2C_WRITE_BYTE(uint8 data)
{
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	0f 92       	push	r0
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	89 83       	std	Y+1, r24	; 0x01
	I2C_WRITE_BUFFER=data;
     658:	e3 e2       	ldi	r30, 0x23	; 35
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	80 83       	st	Z, r24
	I2C_WRITE_ENABLE();
     660:	e6 e5       	ldi	r30, 0x56	; 86
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	84 e8       	ldi	r24, 0x84	; 132
     666:	80 83       	st	Z, r24
	I2C_WAIT(); //wait for data transmission
     668:	e6 e5       	ldi	r30, 0x56	; 86
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	88 23       	and	r24, r24
     670:	dc f7       	brge	.-10     	; 0x668 <I2C_WRITE_BYTE+0x1c>
}
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <I2C_INIT>:

Bool I2C_INIT(I2C_CONFIG_t *I2C)
{
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	df 93       	push	r29
     688:	cf 93       	push	r28
     68a:	00 d0       	rcall	.+0      	; 0x68c <I2C_INIT+0x12>
     68c:	00 d0       	rcall	.+0      	; 0x68e <I2C_INIT+0x14>
     68e:	0f 92       	push	r0
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	9b 83       	std	Y+3, r25	; 0x03
     696:	8a 83       	std	Y+2, r24	; 0x02
	Bool ret=E_OK;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	89 83       	std	Y+1, r24	; 0x01
	switch(I2C->Prescaler_Freq)
     69c:	ea 81       	ldd	r30, Y+2	; 0x02
     69e:	fb 81       	ldd	r31, Y+3	; 0x03
     6a0:	84 81       	ldd	r24, Z+4	; 0x04
     6a2:	83 70       	andi	r24, 0x03	; 3
     6a4:	28 2f       	mov	r18, r24
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	3d 83       	std	Y+5, r19	; 0x05
     6aa:	2c 83       	std	Y+4, r18	; 0x04
     6ac:	8c 81       	ldd	r24, Y+4	; 0x04
     6ae:	9d 81       	ldd	r25, Y+5	; 0x05
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	91 05       	cpc	r25, r1
     6b4:	29 f1       	breq	.+74     	; 0x700 <I2C_INIT+0x86>
     6b6:	ec 81       	ldd	r30, Y+4	; 0x04
     6b8:	fd 81       	ldd	r31, Y+5	; 0x05
     6ba:	e2 30       	cpi	r30, 0x02	; 2
     6bc:	f1 05       	cpc	r31, r1
     6be:	34 f4       	brge	.+12     	; 0x6cc <I2C_INIT+0x52>
     6c0:	2c 81       	ldd	r18, Y+4	; 0x04
     6c2:	3d 81       	ldd	r19, Y+5	; 0x05
     6c4:	21 15       	cp	r18, r1
     6c6:	31 05       	cpc	r19, r1
     6c8:	61 f0       	breq	.+24     	; 0x6e2 <I2C_INIT+0x68>
     6ca:	47 c0       	rjmp	.+142    	; 0x75a <I2C_INIT+0xe0>
     6cc:	8c 81       	ldd	r24, Y+4	; 0x04
     6ce:	9d 81       	ldd	r25, Y+5	; 0x05
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	91 05       	cpc	r25, r1
     6d4:	21 f1       	breq	.+72     	; 0x71e <I2C_INIT+0xa4>
     6d6:	ec 81       	ldd	r30, Y+4	; 0x04
     6d8:	fd 81       	ldd	r31, Y+5	; 0x05
     6da:	e3 30       	cpi	r30, 0x03	; 3
     6dc:	f1 05       	cpc	r31, r1
     6de:	71 f1       	breq	.+92     	; 0x73c <I2C_INIT+0xc2>
     6e0:	3c c0       	rjmp	.+120    	; 0x75a <I2C_INIT+0xe0>
	{
		case TWPS_PRESCALER_1:
			CLEAR_BIT(TWSR,TWPS0);
     6e2:	a1 e2       	ldi	r26, 0x21	; 33
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e1 e2       	ldi	r30, 0x21	; 33
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	8e 7f       	andi	r24, 0xFE	; 254
     6ee:	8c 93       	st	X, r24
			CLEAR_BIT(TWSR,TWPS1);
     6f0:	a1 e2       	ldi	r26, 0x21	; 33
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	e1 e2       	ldi	r30, 0x21	; 33
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	8d 7f       	andi	r24, 0xFD	; 253
     6fc:	8c 93       	st	X, r24
     6fe:	2e c0       	rjmp	.+92     	; 0x75c <I2C_INIT+0xe2>
			break;
		case TWPS_PRESCALER_4:
			SET_BIT(TWSR,TWPS0);
     700:	a1 e2       	ldi	r26, 0x21	; 33
     702:	b0 e0       	ldi	r27, 0x00	; 0
     704:	e1 e2       	ldi	r30, 0x21	; 33
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	81 60       	ori	r24, 0x01	; 1
     70c:	8c 93       	st	X, r24
			CLEAR_BIT(TWSR,TWPS1);
     70e:	a1 e2       	ldi	r26, 0x21	; 33
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	e1 e2       	ldi	r30, 0x21	; 33
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	8d 7f       	andi	r24, 0xFD	; 253
     71a:	8c 93       	st	X, r24
     71c:	1f c0       	rjmp	.+62     	; 0x75c <I2C_INIT+0xe2>
			break;
		case TWPS_PRESCALER_16:
			CLEAR_BIT(TWSR,TWPS0);
     71e:	a1 e2       	ldi	r26, 0x21	; 33
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	e1 e2       	ldi	r30, 0x21	; 33
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	8e 7f       	andi	r24, 0xFE	; 254
     72a:	8c 93       	st	X, r24
			SET_BIT(TWSR,TWPS1);
     72c:	a1 e2       	ldi	r26, 0x21	; 33
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	e1 e2       	ldi	r30, 0x21	; 33
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	82 60       	ori	r24, 0x02	; 2
     738:	8c 93       	st	X, r24
     73a:	10 c0       	rjmp	.+32     	; 0x75c <I2C_INIT+0xe2>
			break;
		case TWPS_PRESCALER_64:
			SET_BIT(TWSR,TWPS0);
     73c:	a1 e2       	ldi	r26, 0x21	; 33
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e1 e2       	ldi	r30, 0x21	; 33
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	81 60       	ori	r24, 0x01	; 1
     748:	8c 93       	st	X, r24
			SET_BIT(TWSR,TWPS1);
     74a:	a1 e2       	ldi	r26, 0x21	; 33
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e1 e2       	ldi	r30, 0x21	; 33
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	82 60       	ori	r24, 0x02	; 2
     756:	8c 93       	st	X, r24
     758:	01 c0       	rjmp	.+2      	; 0x75c <I2C_INIT+0xe2>
			break;
		default:
			ret=E_NOK;
     75a:	19 82       	std	Y+1, r1	; 0x01
	}
	if(ret==E_OK)
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	c1 f5       	brne	.+112    	; 0x7d2 <I2C_INIT+0x158>
		TWBR=((uint32)F_CPU/I2C->SCL_FREQ-16)/(2*Pow_4(I2C->Prescaler_Freq));
     762:	cc 24       	eor	r12, r12
     764:	dd 24       	eor	r13, r13
     766:	68 94       	set
     768:	c5 f8       	bld	r12, 5
     76a:	ea 81       	ldd	r30, Y+2	; 0x02
     76c:	fb 81       	ldd	r31, Y+3	; 0x03
     76e:	20 81       	ld	r18, Z
     770:	31 81       	ldd	r19, Z+1	; 0x01
     772:	42 81       	ldd	r20, Z+2	; 0x02
     774:	53 81       	ldd	r21, Z+3	; 0x03
     776:	80 e4       	ldi	r24, 0x40	; 64
     778:	92 e4       	ldi	r25, 0x42	; 66
     77a:	af e0       	ldi	r26, 0x0F	; 15
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	bc 01       	movw	r22, r24
     780:	cd 01       	movw	r24, r26
     782:	0e 94 16 12 	call	0x242c	; 0x242c <__udivmodsi4>
     786:	da 01       	movw	r26, r20
     788:	c9 01       	movw	r24, r18
     78a:	0f 2e       	mov	r0, r31
     78c:	f0 ef       	ldi	r31, 0xF0	; 240
     78e:	ef 2e       	mov	r14, r31
     790:	ff ef       	ldi	r31, 0xFF	; 255
     792:	ff 2e       	mov	r15, r31
     794:	ff ef       	ldi	r31, 0xFF	; 255
     796:	0f 2f       	mov	r16, r31
     798:	ff ef       	ldi	r31, 0xFF	; 255
     79a:	1f 2f       	mov	r17, r31
     79c:	f0 2d       	mov	r31, r0
     79e:	e8 0e       	add	r14, r24
     7a0:	f9 1e       	adc	r15, r25
     7a2:	0a 1f       	adc	r16, r26
     7a4:	1b 1f       	adc	r17, r27
     7a6:	ea 81       	ldd	r30, Y+2	; 0x02
     7a8:	fb 81       	ldd	r31, Y+3	; 0x03
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	83 70       	andi	r24, 0x03	; 3
     7ae:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Pow_4>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	aa 1f       	adc	r26, r26
     7bc:	bb 1f       	adc	r27, r27
     7be:	9c 01       	movw	r18, r24
     7c0:	ad 01       	movw	r20, r26
     7c2:	c8 01       	movw	r24, r16
     7c4:	b7 01       	movw	r22, r14
     7c6:	0e 94 16 12 	call	0x242c	; 0x242c <__udivmodsi4>
     7ca:	da 01       	movw	r26, r20
     7cc:	c9 01       	movw	r24, r18
     7ce:	f6 01       	movw	r30, r12
     7d0:	80 83       	st	Z, r24
	}
#if I2C_RECIEVE_INTERRUPT==FEATURE_ENABLE
	I2C_RX_CALLBACK_PTR=I2C->I2C_RX_CALLBACK;
	SET_BIT(TWCR,TWIE);
#endif
	return ret;
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	08 95       	ret

000007f0 <I2C_Write_BYTE>:

Bool I2C_Write_BYTE(uint8 Add,uint8 REG_add,uint8 Data)
{
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	2c 97       	sbiw	r28, 0x0c	; 12
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	8a 83       	std	Y+2, r24	; 0x02
     806:	6b 83       	std	Y+3, r22	; 0x03
     808:	4c 83       	std	Y+4, r20	; 0x04
	Bool ret = E_OK;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	89 83       	std	Y+1, r24	; 0x01
	I2C_GEN_START_COND(); //initiate Start Condition on SCL/SDA
     80e:	e6 e5       	ldi	r30, 0x56	; 86
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	84 ea       	ldi	r24, 0xA4	; 164
     814:	80 83       	st	Z, r24
	I2C_WAIT();
     816:	e6 e5       	ldi	r30, 0x56	; 86
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	88 23       	and	r24, r24
     81e:	dc f7       	brge	.-10     	; 0x816 <I2C_Write_BYTE+0x26>
	switch (I2C_STATUS) {
     820:	e1 e2       	ldi	r30, 0x21	; 33
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	28 2f       	mov	r18, r24
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	3c 87       	std	Y+12, r19	; 0x0c
     82c:	2b 87       	std	Y+11, r18	; 0x0b
     82e:	8b 85       	ldd	r24, Y+11	; 0x0b
     830:	9c 85       	ldd	r25, Y+12	; 0x0c
     832:	80 31       	cpi	r24, 0x10	; 16
     834:	91 05       	cpc	r25, r1
     836:	31 f0       	breq	.+12     	; 0x844 <I2C_Write_BYTE+0x54>
     838:	2b 85       	ldd	r18, Y+11	; 0x0b
     83a:	3c 85       	ldd	r19, Y+12	; 0x0c
     83c:	28 33       	cpi	r18, 0x38	; 56
     83e:	31 05       	cpc	r19, r1
     840:	09 f4       	brne	.+2      	; 0x844 <I2C_Write_BYTE+0x54>
	case TWSR_START_MSTR:
	case TWSR_REPEATED_START_MSTR:
		break;
	case TWSR_ARBIT_LOSS:
		ret = E_NOK; //Error
     842:	19 82       	std	Y+1, r1	; 0x01
	} //start bit sent SDA switched from high to low bus is busy hence send address
	if (ret == E_OK) {
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	e9 f4       	brne	.+58     	; 0x884 <__stack+0x25>
		I2C_WRITE_BYTE(Add | I2C_WRITE);
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     850:	e1 e2       	ldi	r30, 0x21	; 33
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	28 2f       	mov	r18, r24
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	3a 87       	std	Y+10, r19	; 0x0a
     85c:	29 87       	std	Y+9, r18	; 0x09
     85e:	89 85       	ldd	r24, Y+9	; 0x09
     860:	9a 85       	ldd	r25, Y+10	; 0x0a
     862:	80 32       	cpi	r24, 0x20	; 32
     864:	91 05       	cpc	r25, r1
     866:	59 f0       	breq	.+22     	; 0x87e <__stack+0x1f>
     868:	29 85       	ldd	r18, Y+9	; 0x09
     86a:	3a 85       	ldd	r19, Y+10	; 0x0a
     86c:	28 33       	cpi	r18, 0x38	; 56
     86e:	31 05       	cpc	r19, r1
     870:	31 f0       	breq	.+12     	; 0x87e <__stack+0x1f>
     872:	89 85       	ldd	r24, Y+9	; 0x09
     874:	9a 85       	ldd	r25, Y+10	; 0x0a
     876:	88 31       	cpi	r24, 0x18	; 24
     878:	91 05       	cpc	r25, r1
     87a:	21 f0       	breq	.+8      	; 0x884 <__stack+0x25>
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
		case TWSR_MSTR_ADD_ACK_REC:
			break;
		case TWSR_MSTR_ADD_NACK_REC:
		case TWSR_ARBIT_LOSS:
			ret = E_NOK;
     87e:	19 82       	std	Y+1, r1	; 0x01
     880:	01 c0       	rjmp	.+2      	; 0x884 <__stack+0x25>
			break;
		default:
			ret = E_NOK;
     882:	19 82       	std	Y+1, r1	; 0x01
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	e9 f4       	brne	.+58     	; 0x8c4 <__stack+0x65>
		I2C_WRITE_BYTE(REG_add | I2C_WRITE);
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     890:	e1 e2       	ldi	r30, 0x21	; 33
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	38 87       	std	Y+8, r19	; 0x08
     89c:	2f 83       	std	Y+7, r18	; 0x07
     89e:	8f 81       	ldd	r24, Y+7	; 0x07
     8a0:	98 85       	ldd	r25, Y+8	; 0x08
     8a2:	80 33       	cpi	r24, 0x30	; 48
     8a4:	91 05       	cpc	r25, r1
     8a6:	59 f0       	breq	.+22     	; 0x8be <__stack+0x5f>
     8a8:	2f 81       	ldd	r18, Y+7	; 0x07
     8aa:	38 85       	ldd	r19, Y+8	; 0x08
     8ac:	28 33       	cpi	r18, 0x38	; 56
     8ae:	31 05       	cpc	r19, r1
     8b0:	31 f0       	breq	.+12     	; 0x8be <__stack+0x5f>
     8b2:	8f 81       	ldd	r24, Y+7	; 0x07
     8b4:	98 85       	ldd	r25, Y+8	; 0x08
     8b6:	88 32       	cpi	r24, 0x28	; 40
     8b8:	91 05       	cpc	r25, r1
     8ba:	21 f0       	breq	.+8      	; 0x8c4 <__stack+0x65>
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
		case TWSR_MSTR_DATA_ACK_REC:
			break;
		case TWSR_MSTR_DATA_NACK_REC:
		case TWSR_ARBIT_LOSS:
			ret = E_NOK;
     8be:	19 82       	std	Y+1, r1	; 0x01
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <__stack+0x65>
			break;
		default:
			ret = E_NOK;
     8c2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	if (ret == E_OK) {
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	11 f5       	brne	.+68     	; 0x90e <__stack+0xaf>
		I2C_WRITE_BYTE(Data);
     8ca:	8c 81       	ldd	r24, Y+4	; 0x04
     8cc:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		I2C_WAIT();
     8d0:	e6 e5       	ldi	r30, 0x56	; 86
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	88 23       	and	r24, r24
     8d8:	dc f7       	brge	.-10     	; 0x8d0 <__stack+0x71>
		switch (I2C_STATUS) {
     8da:	e1 e2       	ldi	r30, 0x21	; 33
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	28 2f       	mov	r18, r24
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	3e 83       	std	Y+6, r19	; 0x06
     8e6:	2d 83       	std	Y+5, r18	; 0x05
     8e8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ea:	9e 81       	ldd	r25, Y+6	; 0x06
     8ec:	80 33       	cpi	r24, 0x30	; 48
     8ee:	91 05       	cpc	r25, r1
     8f0:	59 f0       	breq	.+22     	; 0x908 <__stack+0xa9>
     8f2:	2d 81       	ldd	r18, Y+5	; 0x05
     8f4:	3e 81       	ldd	r19, Y+6	; 0x06
     8f6:	28 33       	cpi	r18, 0x38	; 56
     8f8:	31 05       	cpc	r19, r1
     8fa:	31 f0       	breq	.+12     	; 0x908 <__stack+0xa9>
     8fc:	8d 81       	ldd	r24, Y+5	; 0x05
     8fe:	9e 81       	ldd	r25, Y+6	; 0x06
     900:	88 32       	cpi	r24, 0x28	; 40
     902:	91 05       	cpc	r25, r1
     904:	21 f0       	breq	.+8      	; 0x90e <__stack+0xaf>
     906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
		case TWSR_MSTR_DATA_ACK_REC:
			break;
		case TWSR_MSTR_DATA_NACK_REC:
		case TWSR_ARBIT_LOSS:
			ret = E_NOK;
     908:	19 82       	std	Y+1, r1	; 0x01
     90a:	01 c0       	rjmp	.+2      	; 0x90e <__stack+0xaf>
			break;
		default:
			ret = E_NOK;
     90c:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return ret;
     90e:	89 81       	ldd	r24, Y+1	; 0x01
}
     910:	2c 96       	adiw	r28, 0x0c	; 12
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	08 95       	ret

00000922 <I2C_WRITE_NBYTES>:

Bool I2C_WRITE_NBYTES(uint8 Add,uint8 REG_add,uint8 *Data,uint8 No_bytes)
{
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	2f 97       	sbiw	r28, 0x0f	; 15
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	6c 83       	std	Y+4, r22	; 0x04
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	4d 83       	std	Y+5, r20	; 0x05
     93e:	2f 83       	std	Y+7, r18	; 0x07
	Bool ret = E_OK;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	8a 83       	std	Y+2, r24	; 0x02
	I2C_GEN_START_COND();//initiate Start Condition on SCL/SDA
     944:	e6 e5       	ldi	r30, 0x56	; 86
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	84 ea       	ldi	r24, 0xA4	; 164
     94a:	80 83       	st	Z, r24
	I2C_WAIT();
     94c:	e6 e5       	ldi	r30, 0x56	; 86
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	88 23       	and	r24, r24
     954:	dc f7       	brge	.-10     	; 0x94c <I2C_WRITE_NBYTES+0x2a>
	switch(I2C_STATUS)
     956:	e1 e2       	ldi	r30, 0x21	; 33
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	28 2f       	mov	r18, r24
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	3f 87       	std	Y+15, r19	; 0x0f
     962:	2e 87       	std	Y+14, r18	; 0x0e
     964:	8e 85       	ldd	r24, Y+14	; 0x0e
     966:	9f 85       	ldd	r25, Y+15	; 0x0f
     968:	80 31       	cpi	r24, 0x10	; 16
     96a:	91 05       	cpc	r25, r1
     96c:	31 f0       	breq	.+12     	; 0x97a <I2C_WRITE_NBYTES+0x58>
     96e:	2e 85       	ldd	r18, Y+14	; 0x0e
     970:	3f 85       	ldd	r19, Y+15	; 0x0f
     972:	28 33       	cpi	r18, 0x38	; 56
     974:	31 05       	cpc	r19, r1
     976:	09 f4       	brne	.+2      	; 0x97a <I2C_WRITE_NBYTES+0x58>
	{
		case TWSR_START_MSTR:
		case TWSR_REPEATED_START_MSTR:
			break;
		case TWSR_ARBIT_LOSS:
			ret=E_NOK;//Error
     978:	1a 82       	std	Y+2, r1	; 0x02
	}//start bit sent SDA switched from high to low bus is busy hence send address
	if(ret==E_OK)
     97a:	8a 81       	ldd	r24, Y+2	; 0x02
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	e9 f4       	brne	.+58     	; 0x9ba <I2C_WRITE_NBYTES+0x98>
	{
		I2C_WRITE_BYTE(Add|I2C_WRITE);
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     986:	e1 e2       	ldi	r30, 0x21	; 33
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	28 2f       	mov	r18, r24
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	3d 87       	std	Y+13, r19	; 0x0d
     992:	2c 87       	std	Y+12, r18	; 0x0c
     994:	8c 85       	ldd	r24, Y+12	; 0x0c
     996:	9d 85       	ldd	r25, Y+13	; 0x0d
     998:	80 32       	cpi	r24, 0x20	; 32
     99a:	91 05       	cpc	r25, r1
     99c:	59 f0       	breq	.+22     	; 0x9b4 <I2C_WRITE_NBYTES+0x92>
     99e:	2c 85       	ldd	r18, Y+12	; 0x0c
     9a0:	3d 85       	ldd	r19, Y+13	; 0x0d
     9a2:	28 33       	cpi	r18, 0x38	; 56
     9a4:	31 05       	cpc	r19, r1
     9a6:	31 f0       	breq	.+12     	; 0x9b4 <I2C_WRITE_NBYTES+0x92>
     9a8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9aa:	9d 85       	ldd	r25, Y+13	; 0x0d
     9ac:	88 31       	cpi	r24, 0x18	; 24
     9ae:	91 05       	cpc	r25, r1
     9b0:	21 f0       	breq	.+8      	; 0x9ba <I2C_WRITE_NBYTES+0x98>
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <I2C_WRITE_NBYTES+0x96>
			case TWSR_MSTR_ADD_ACK_REC:
				break;
			case TWSR_MSTR_ADD_NACK_REC:
			case TWSR_ARBIT_LOSS:
				ret = E_NOK;
     9b4:	1a 82       	std	Y+2, r1	; 0x02
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <I2C_WRITE_NBYTES+0x98>
				break;
			default:
				ret = E_NOK;
     9b8:	1a 82       	std	Y+2, r1	; 0x02
		} //salve+W/R transmitted send data
	}
	if(ret==E_OK)
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	e9 f4       	brne	.+58     	; 0x9fa <I2C_WRITE_NBYTES+0xd8>
	{
		I2C_WRITE_BYTE(REG_add|I2C_WRITE);
     9c0:	8c 81       	ldd	r24, Y+4	; 0x04
     9c2:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch(I2C_STATUS)
     9c6:	e1 e2       	ldi	r30, 0x21	; 33
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	3b 87       	std	Y+11, r19	; 0x0b
     9d2:	2a 87       	std	Y+10, r18	; 0x0a
     9d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     9d8:	80 33       	cpi	r24, 0x30	; 48
     9da:	91 05       	cpc	r25, r1
     9dc:	59 f0       	breq	.+22     	; 0x9f4 <I2C_WRITE_NBYTES+0xd2>
     9de:	2a 85       	ldd	r18, Y+10	; 0x0a
     9e0:	3b 85       	ldd	r19, Y+11	; 0x0b
     9e2:	28 33       	cpi	r18, 0x38	; 56
     9e4:	31 05       	cpc	r19, r1
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <I2C_WRITE_NBYTES+0xd2>
     9e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     9ea:	9b 85       	ldd	r25, Y+11	; 0x0b
     9ec:	88 32       	cpi	r24, 0x28	; 40
     9ee:	91 05       	cpc	r25, r1
     9f0:	21 f0       	breq	.+8      	; 0x9fa <I2C_WRITE_NBYTES+0xd8>
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <I2C_WRITE_NBYTES+0xd6>
		{
			case TWSR_MSTR_DATA_ACK_REC:
				break;
			case TWSR_MSTR_DATA_NACK_REC:
			case TWSR_ARBIT_LOSS:
				ret=E_NOK;
     9f4:	1a 82       	std	Y+2, r1	; 0x02
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <I2C_WRITE_NBYTES+0xd8>
				break;
			default:
				ret=E_NOK;
     9f8:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	if(ret==E_OK)
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	e9 f5       	brne	.+122    	; 0xa7a <I2C_WRITE_NBYTES+0x158>
	{
		uint8 Bytes_sent=0;
     a00:	19 82       	std	Y+1, r1	; 0x01
		for(Bytes_sent=0;Bytes_sent<=No_bytes-1;Bytes_sent++)
     a02:	19 82       	std	Y+1, r1	; 0x01
     a04:	30 c0       	rjmp	.+96     	; 0xa66 <I2C_WRITE_NBYTES+0x144>
		{
			I2C_WRITE_BYTE(*(Data+Bytes_sent));
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	8d 81       	ldd	r24, Y+5	; 0x05
     a0e:	9e 81       	ldd	r25, Y+6	; 0x06
     a10:	fc 01       	movw	r30, r24
     a12:	e2 0f       	add	r30, r18
     a14:	f3 1f       	adc	r31, r19
     a16:	80 81       	ld	r24, Z
     a18:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
			I2C_WAIT();
     a1c:	e6 e5       	ldi	r30, 0x56	; 86
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	88 23       	and	r24, r24
     a24:	dc f7       	brge	.-10     	; 0xa1c <I2C_WRITE_NBYTES+0xfa>
			switch(I2C_STATUS)
     a26:	e1 e2       	ldi	r30, 0x21	; 33
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	28 2f       	mov	r18, r24
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	39 87       	std	Y+9, r19	; 0x09
     a32:	28 87       	std	Y+8, r18	; 0x08
     a34:	88 85       	ldd	r24, Y+8	; 0x08
     a36:	99 85       	ldd	r25, Y+9	; 0x09
     a38:	80 33       	cpi	r24, 0x30	; 48
     a3a:	91 05       	cpc	r25, r1
     a3c:	59 f0       	breq	.+22     	; 0xa54 <I2C_WRITE_NBYTES+0x132>
     a3e:	28 85       	ldd	r18, Y+8	; 0x08
     a40:	39 85       	ldd	r19, Y+9	; 0x09
     a42:	28 33       	cpi	r18, 0x38	; 56
     a44:	31 05       	cpc	r19, r1
     a46:	31 f0       	breq	.+12     	; 0xa54 <I2C_WRITE_NBYTES+0x132>
     a48:	88 85       	ldd	r24, Y+8	; 0x08
     a4a:	99 85       	ldd	r25, Y+9	; 0x09
     a4c:	88 32       	cpi	r24, 0x28	; 40
     a4e:	91 05       	cpc	r25, r1
     a50:	21 f0       	breq	.+8      	; 0xa5a <I2C_WRITE_NBYTES+0x138>
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <I2C_WRITE_NBYTES+0x136>
			{
				case TWSR_MSTR_DATA_ACK_REC:
					break;
				case TWSR_MSTR_DATA_NACK_REC:
				case TWSR_ARBIT_LOSS:
					ret = E_NOK;
     a54:	1a 82       	std	Y+2, r1	; 0x02
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <I2C_WRITE_NBYTES+0x138>
					break;
				default:
					ret = E_NOK;
     a58:	1a 82       	std	Y+2, r1	; 0x02
			}
			if(ret==E_NOK)
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	88 23       	and	r24, r24
     a5e:	69 f0       	breq	.+26     	; 0xa7a <I2C_WRITE_NBYTES+0x158>
		}
	}
	if(ret==E_OK)
	{
		uint8 Bytes_sent=0;
		for(Bytes_sent=0;Bytes_sent<=No_bytes-1;Bytes_sent++)
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	8f 5f       	subi	r24, 0xFF	; 255
     a64:	89 83       	std	Y+1, r24	; 0x01
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	28 2f       	mov	r18, r24
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	8f 81       	ldd	r24, Y+7	; 0x07
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	34 f6       	brge	.-116    	; 0xa06 <I2C_WRITE_NBYTES+0xe4>
			}
			if(ret==E_NOK)
				break;
		}
	}
	I2C_GEN_STOP_COND();
     a7a:	e6 e5       	ldi	r30, 0x56	; 86
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	84 e9       	ldi	r24, 0x94	; 148
     a80:	80 83       	st	Z, r24
	I2C_WAIT_STOP();
     a82:	e6 e5       	ldi	r30, 0x56	; 86
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	82 95       	swap	r24
     a8a:	8f 70       	andi	r24, 0x0F	; 15
     a8c:	88 2f       	mov	r24, r24
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	81 70       	andi	r24, 0x01	; 1
     a92:	90 70       	andi	r25, 0x00	; 0
     a94:	88 23       	and	r24, r24
     a96:	a9 f7       	brne	.-22     	; 0xa82 <I2C_WRITE_NBYTES+0x160>
	return ret;
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
}
     a9a:	2f 96       	adiw	r28, 0x0f	; 15
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	cf 91       	pop	r28
     aa8:	df 91       	pop	r29
     aaa:	08 95       	ret

00000aac <I2C_READ_BYTE>:

Bool I2C_READ_BYTE(uint8 Add,uint8 REG_add,uint8 *Data)
{
     aac:	df 93       	push	r29
     aae:	cf 93       	push	r28
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	2f 97       	sbiw	r28, 0x0f	; 15
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	8a 83       	std	Y+2, r24	; 0x02
     ac2:	6b 83       	std	Y+3, r22	; 0x03
     ac4:	5d 83       	std	Y+5, r21	; 0x05
     ac6:	4c 83       	std	Y+4, r20	; 0x04
	Bool ret = E_OK;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	89 83       	std	Y+1, r24	; 0x01
	I2C_GEN_START_COND(); //initiate Start Condition on SCL/SDA
     acc:	e6 e5       	ldi	r30, 0x56	; 86
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	84 ea       	ldi	r24, 0xA4	; 164
     ad2:	80 83       	st	Z, r24
	I2C_WAIT();
     ad4:	e6 e5       	ldi	r30, 0x56	; 86
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	88 23       	and	r24, r24
     adc:	dc f7       	brge	.-10     	; 0xad4 <I2C_READ_BYTE+0x28>
	switch (I2C_STATUS) {
     ade:	e1 e2       	ldi	r30, 0x21	; 33
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	28 2f       	mov	r18, r24
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	3f 87       	std	Y+15, r19	; 0x0f
     aea:	2e 87       	std	Y+14, r18	; 0x0e
     aec:	8e 85       	ldd	r24, Y+14	; 0x0e
     aee:	9f 85       	ldd	r25, Y+15	; 0x0f
     af0:	80 31       	cpi	r24, 0x10	; 16
     af2:	91 05       	cpc	r25, r1
     af4:	31 f0       	breq	.+12     	; 0xb02 <I2C_READ_BYTE+0x56>
     af6:	2e 85       	ldd	r18, Y+14	; 0x0e
     af8:	3f 85       	ldd	r19, Y+15	; 0x0f
     afa:	28 33       	cpi	r18, 0x38	; 56
     afc:	31 05       	cpc	r19, r1
     afe:	09 f4       	brne	.+2      	; 0xb02 <I2C_READ_BYTE+0x56>
	case TWSR_START_MSTR:
	case TWSR_REPEATED_START_MSTR:
		break;
	case TWSR_ARBIT_LOSS:
		ret = E_NOK; //Error
     b00:	19 82       	std	Y+1, r1	; 0x01
	} //start bit sent SDA switched from high to low bus is busy hence send address
	if (ret == E_OK) {
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	e9 f4       	brne	.+58     	; 0xb42 <I2C_READ_BYTE+0x96>
		I2C_WRITE_BYTE(Add | I2C_WRITE);
     b08:	8a 81       	ldd	r24, Y+2	; 0x02
     b0a:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     b0e:	e1 e2       	ldi	r30, 0x21	; 33
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	3d 87       	std	Y+13, r19	; 0x0d
     b1a:	2c 87       	std	Y+12, r18	; 0x0c
     b1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b20:	80 32       	cpi	r24, 0x20	; 32
     b22:	91 05       	cpc	r25, r1
     b24:	59 f0       	breq	.+22     	; 0xb3c <I2C_READ_BYTE+0x90>
     b26:	2c 85       	ldd	r18, Y+12	; 0x0c
     b28:	3d 85       	ldd	r19, Y+13	; 0x0d
     b2a:	28 33       	cpi	r18, 0x38	; 56
     b2c:	31 05       	cpc	r19, r1
     b2e:	31 f0       	breq	.+12     	; 0xb3c <I2C_READ_BYTE+0x90>
     b30:	8c 85       	ldd	r24, Y+12	; 0x0c
     b32:	9d 85       	ldd	r25, Y+13	; 0x0d
     b34:	88 31       	cpi	r24, 0x18	; 24
     b36:	91 05       	cpc	r25, r1
     b38:	21 f0       	breq	.+8      	; 0xb42 <I2C_READ_BYTE+0x96>
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <I2C_READ_BYTE+0x94>
		case TWSR_MSTR_ADD_ACK_REC:
			break;
		case TWSR_MSTR_ADD_NACK_REC:
		case TWSR_ARBIT_LOSS:
			ret = E_NOK;
     b3c:	19 82       	std	Y+1, r1	; 0x01
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <I2C_READ_BYTE+0x96>
			break;
		default:
			ret = E_NOK;
     b40:	19 82       	std	Y+1, r1	; 0x01
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	e9 f4       	brne	.+58     	; 0xb82 <I2C_READ_BYTE+0xd6>
		I2C_WRITE_BYTE(REG_add | I2C_WRITE);
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     b4e:	e1 e2       	ldi	r30, 0x21	; 33
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3b 87       	std	Y+11, r19	; 0x0b
     b5a:	2a 87       	std	Y+10, r18	; 0x0a
     b5c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b60:	80 33       	cpi	r24, 0x30	; 48
     b62:	91 05       	cpc	r25, r1
     b64:	59 f0       	breq	.+22     	; 0xb7c <I2C_READ_BYTE+0xd0>
     b66:	2a 85       	ldd	r18, Y+10	; 0x0a
     b68:	3b 85       	ldd	r19, Y+11	; 0x0b
     b6a:	28 33       	cpi	r18, 0x38	; 56
     b6c:	31 05       	cpc	r19, r1
     b6e:	31 f0       	breq	.+12     	; 0xb7c <I2C_READ_BYTE+0xd0>
     b70:	8a 85       	ldd	r24, Y+10	; 0x0a
     b72:	9b 85       	ldd	r25, Y+11	; 0x0b
     b74:	88 32       	cpi	r24, 0x28	; 40
     b76:	91 05       	cpc	r25, r1
     b78:	21 f0       	breq	.+8      	; 0xb82 <I2C_READ_BYTE+0xd6>
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <I2C_READ_BYTE+0xd4>
		case TWSR_MSTR_DATA_ACK_REC:
			break;
		case TWSR_MSTR_DATA_NACK_REC:
		case TWSR_ARBIT_LOSS:
			ret = E_NOK;
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <I2C_READ_BYTE+0xd6>
			break;
		default:
			ret = E_NOK;
     b80:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	if (ret == E_OK) {
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	19 f5       	brne	.+70     	; 0xbce <I2C_READ_BYTE+0x122>
		I2C_GEN_START_COND(); //initiate Repeated Start Condition on SCL/SDA
     b88:	e6 e5       	ldi	r30, 0x56	; 86
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	84 ea       	ldi	r24, 0xA4	; 164
     b8e:	80 83       	st	Z, r24
		I2C_WAIT();
     b90:	e6 e5       	ldi	r30, 0x56	; 86
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	88 23       	and	r24, r24
     b98:	dc f7       	brge	.-10     	; 0xb90 <I2C_READ_BYTE+0xe4>
		switch (I2C_STATUS) {
     b9a:	e1 e2       	ldi	r30, 0x21	; 33
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	39 87       	std	Y+9, r19	; 0x09
     ba6:	28 87       	std	Y+8, r18	; 0x08
     ba8:	88 85       	ldd	r24, Y+8	; 0x08
     baa:	99 85       	ldd	r25, Y+9	; 0x09
     bac:	80 31       	cpi	r24, 0x10	; 16
     bae:	91 05       	cpc	r25, r1
     bb0:	71 f0       	breq	.+28     	; 0xbce <I2C_READ_BYTE+0x122>
     bb2:	28 85       	ldd	r18, Y+8	; 0x08
     bb4:	39 85       	ldd	r19, Y+9	; 0x09
     bb6:	28 33       	cpi	r18, 0x38	; 56
     bb8:	31 05       	cpc	r19, r1
     bba:	31 f0       	breq	.+12     	; 0xbc8 <I2C_READ_BYTE+0x11c>
     bbc:	88 85       	ldd	r24, Y+8	; 0x08
     bbe:	99 85       	ldd	r25, Y+9	; 0x09
     bc0:	88 30       	cpi	r24, 0x08	; 8
     bc2:	91 05       	cpc	r25, r1
     bc4:	21 f0       	breq	.+8      	; 0xbce <I2C_READ_BYTE+0x122>
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <I2C_READ_BYTE+0x120>
		case TWSR_REPEATED_START_MSTR:
		case TWSR_START_MSTR:
			break;
		case TWSR_ARBIT_LOSS:
			ret = E_NOK;
     bc8:	19 82       	std	Y+1, r1	; 0x01
     bca:	01 c0       	rjmp	.+2      	; 0xbce <I2C_READ_BYTE+0x122>
			break;
		default:
			ret = E_NOK;
     bcc:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	if (ret == E_OK) //send data
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	e9 f4       	brne	.+58     	; 0xc0e <I2C_READ_BYTE+0x162>
	{
		I2C_WRITE_BYTE(Add | I2C_READ);
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     bdc:	e1 e2       	ldi	r30, 0x21	; 33
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	3f 83       	std	Y+7, r19	; 0x07
     be8:	2e 83       	std	Y+6, r18	; 0x06
     bea:	8e 81       	ldd	r24, Y+6	; 0x06
     bec:	9f 81       	ldd	r25, Y+7	; 0x07
     bee:	80 34       	cpi	r24, 0x40	; 64
     bf0:	91 05       	cpc	r25, r1
     bf2:	69 f0       	breq	.+26     	; 0xc0e <I2C_READ_BYTE+0x162>
     bf4:	2e 81       	ldd	r18, Y+6	; 0x06
     bf6:	3f 81       	ldd	r19, Y+7	; 0x07
     bf8:	28 34       	cpi	r18, 0x48	; 72
     bfa:	31 05       	cpc	r19, r1
     bfc:	29 f0       	breq	.+10     	; 0xc08 <I2C_READ_BYTE+0x15c>
     bfe:	8e 81       	ldd	r24, Y+6	; 0x06
     c00:	9f 81       	ldd	r25, Y+7	; 0x07
     c02:	88 33       	cpi	r24, 0x38	; 56
     c04:	91 05       	cpc	r25, r1
     c06:	11 f4       	brne	.+4      	; 0xc0c <I2C_READ_BYTE+0x160>
		case TW_MSR_SLA_R_ACK:
			break;
		case TW_MSR_SLA_R_NACK:
		case TWSR_ARBIT_LOSS:
			ret = E_NOK;
     c08:	19 82       	std	Y+1, r1	; 0x01
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <I2C_READ_BYTE+0x162>
			break;
		default:
			ret = E_NOK;
     c0c:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	if (ret == E_OK) {
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	a9 f4       	brne	.+42     	; 0xc3e <I2C_READ_BYTE+0x192>
		I2C_READ_NACK();
     c14:	e6 e5       	ldi	r30, 0x56	; 86
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	84 e8       	ldi	r24, 0x84	; 132
     c1a:	80 83       	st	Z, r24
		I2C_WAIT();
     c1c:	e6 e5       	ldi	r30, 0x56	; 86
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 23       	and	r24, r24
     c24:	dc f7       	brge	.-10     	; 0xc1c <I2C_READ_BYTE+0x170>
		*Data = I2C_WRITE_BUFFER;
     c26:	e3 e2       	ldi	r30, 0x23	; 35
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	ec 81       	ldd	r30, Y+4	; 0x04
     c2e:	fd 81       	ldd	r31, Y+5	; 0x05
     c30:	80 83       	st	Z, r24
		if (I2C_STATUS != TW_MSR_DATA_R_NACK)
     c32:	e1 e2       	ldi	r30, 0x21	; 33
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 35       	cpi	r24, 0x58	; 88
     c3a:	09 f0       	breq	.+2      	; 0xc3e <I2C_READ_BYTE+0x192>
			ret = E_NOK;
     c3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c40:	2f 96       	adiw	r28, 0x0f	; 15
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <I2C_READ_NBYTES>:

Bool I2C_READ_NBYTES(uint8 Add,uint8 REG_add,uint8 *Data,int8 No_bytes)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	60 97       	sbiw	r28, 0x10	; 16
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	8a 83       	std	Y+2, r24	; 0x02
     c68:	6b 83       	std	Y+3, r22	; 0x03
     c6a:	5d 83       	std	Y+5, r21	; 0x05
     c6c:	4c 83       	std	Y+4, r20	; 0x04
     c6e:	2e 83       	std	Y+6, r18	; 0x06
	Bool ret = E_OK;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	89 83       	std	Y+1, r24	; 0x01
	I2C_GEN_START_COND(); //initiate Start Condition on SCL/SDA
     c74:	e6 e5       	ldi	r30, 0x56	; 86
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	84 ea       	ldi	r24, 0xA4	; 164
     c7a:	80 83       	st	Z, r24
	I2C_WAIT();
     c7c:	e6 e5       	ldi	r30, 0x56	; 86
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	88 23       	and	r24, r24
     c84:	dc f7       	brge	.-10     	; 0xc7c <I2C_READ_NBYTES+0x2a>
	switch (I2C_STATUS) {
     c86:	e1 e2       	ldi	r30, 0x21	; 33
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	38 8b       	std	Y+16, r19	; 0x10
     c92:	2f 87       	std	Y+15, r18	; 0x0f
     c94:	8f 85       	ldd	r24, Y+15	; 0x0f
     c96:	98 89       	ldd	r25, Y+16	; 0x10
     c98:	80 31       	cpi	r24, 0x10	; 16
     c9a:	91 05       	cpc	r25, r1
     c9c:	31 f0       	breq	.+12     	; 0xcaa <I2C_READ_NBYTES+0x58>
     c9e:	2f 85       	ldd	r18, Y+15	; 0x0f
     ca0:	38 89       	ldd	r19, Y+16	; 0x10
     ca2:	28 33       	cpi	r18, 0x38	; 56
     ca4:	31 05       	cpc	r19, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <I2C_READ_NBYTES+0x58>
		case TWSR_START_MSTR:
		case TWSR_REPEATED_START_MSTR:
			break;
		case TWSR_ARBIT_LOSS:
			ret = E_NOK; //Error
     ca8:	19 82       	std	Y+1, r1	; 0x01
	} //start bit sent SDA switched from high to low bus is busy hence send address
	if (ret == E_OK) {
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	e9 f4       	brne	.+58     	; 0xcea <I2C_READ_NBYTES+0x98>
		I2C_WRITE_BYTE(Add | I2C_WRITE);
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     cb6:	e1 e2       	ldi	r30, 0x21	; 33
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	3e 87       	std	Y+14, r19	; 0x0e
     cc2:	2d 87       	std	Y+13, r18	; 0x0d
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	80 32       	cpi	r24, 0x20	; 32
     cca:	91 05       	cpc	r25, r1
     ccc:	59 f0       	breq	.+22     	; 0xce4 <I2C_READ_NBYTES+0x92>
     cce:	2d 85       	ldd	r18, Y+13	; 0x0d
     cd0:	3e 85       	ldd	r19, Y+14	; 0x0e
     cd2:	28 33       	cpi	r18, 0x38	; 56
     cd4:	31 05       	cpc	r19, r1
     cd6:	31 f0       	breq	.+12     	; 0xce4 <I2C_READ_NBYTES+0x92>
     cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cda:	9e 85       	ldd	r25, Y+14	; 0x0e
     cdc:	88 31       	cpi	r24, 0x18	; 24
     cde:	91 05       	cpc	r25, r1
     ce0:	21 f0       	breq	.+8      	; 0xcea <I2C_READ_NBYTES+0x98>
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <I2C_READ_NBYTES+0x96>
			case TWSR_MSTR_ADD_ACK_REC:
				break;
			case TWSR_MSTR_ADD_NACK_REC:
			case TWSR_ARBIT_LOSS:
				ret = E_NOK;
     ce4:	19 82       	std	Y+1, r1	; 0x01
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <I2C_READ_NBYTES+0x98>
				break;
			default:
				ret = E_NOK;
     ce8:	19 82       	std	Y+1, r1	; 0x01
		} //salve+W/R transmitted send data
	}
	if (ret == E_OK) {
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	e9 f4       	brne	.+58     	; 0xd2a <I2C_READ_NBYTES+0xd8>
		I2C_WRITE_BYTE(REG_add | I2C_WRITE);
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS) {
     cf6:	e1 e2       	ldi	r30, 0x21	; 33
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	3c 87       	std	Y+12, r19	; 0x0c
     d02:	2b 87       	std	Y+11, r18	; 0x0b
     d04:	8b 85       	ldd	r24, Y+11	; 0x0b
     d06:	9c 85       	ldd	r25, Y+12	; 0x0c
     d08:	80 33       	cpi	r24, 0x30	; 48
     d0a:	91 05       	cpc	r25, r1
     d0c:	59 f0       	breq	.+22     	; 0xd24 <I2C_READ_NBYTES+0xd2>
     d0e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d10:	3c 85       	ldd	r19, Y+12	; 0x0c
     d12:	28 33       	cpi	r18, 0x38	; 56
     d14:	31 05       	cpc	r19, r1
     d16:	31 f0       	breq	.+12     	; 0xd24 <I2C_READ_NBYTES+0xd2>
     d18:	8b 85       	ldd	r24, Y+11	; 0x0b
     d1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1c:	88 32       	cpi	r24, 0x28	; 40
     d1e:	91 05       	cpc	r25, r1
     d20:	21 f0       	breq	.+8      	; 0xd2a <I2C_READ_NBYTES+0xd8>
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <I2C_READ_NBYTES+0xd6>
			case TWSR_MSTR_DATA_ACK_REC:
				break;
			case TWSR_MSTR_DATA_NACK_REC:
			case TWSR_ARBIT_LOSS:
				ret = E_NOK;
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <I2C_READ_NBYTES+0xd8>
				break;
			default:
				ret = E_NOK;
     d28:	19 82       	std	Y+1, r1	; 0x01
			}
	}
	if (ret == E_OK) {
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	19 f5       	brne	.+70     	; 0xd76 <I2C_READ_NBYTES+0x124>
		I2C_GEN_START_COND(); //initiate Repeated Start Condition on SCL/SDA
     d30:	e6 e5       	ldi	r30, 0x56	; 86
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	84 ea       	ldi	r24, 0xA4	; 164
     d36:	80 83       	st	Z, r24
		I2C_WAIT();
     d38:	e6 e5       	ldi	r30, 0x56	; 86
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	88 23       	and	r24, r24
     d40:	dc f7       	brge	.-10     	; 0xd38 <I2C_READ_NBYTES+0xe6>
		switch (I2C_STATUS) {
     d42:	e1 e2       	ldi	r30, 0x21	; 33
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3a 87       	std	Y+10, r19	; 0x0a
     d4e:	29 87       	std	Y+9, r18	; 0x09
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	80 31       	cpi	r24, 0x10	; 16
     d56:	91 05       	cpc	r25, r1
     d58:	71 f0       	breq	.+28     	; 0xd76 <I2C_READ_NBYTES+0x124>
     d5a:	29 85       	ldd	r18, Y+9	; 0x09
     d5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d5e:	28 33       	cpi	r18, 0x38	; 56
     d60:	31 05       	cpc	r19, r1
     d62:	31 f0       	breq	.+12     	; 0xd70 <I2C_READ_NBYTES+0x11e>
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	88 30       	cpi	r24, 0x08	; 8
     d6a:	91 05       	cpc	r25, r1
     d6c:	21 f0       	breq	.+8      	; 0xd76 <I2C_READ_NBYTES+0x124>
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <I2C_READ_NBYTES+0x122>
			case TWSR_REPEATED_START_MSTR:
			case TWSR_START_MSTR:
				break;
			case TWSR_ARBIT_LOSS:
				ret = E_NOK;
     d70:	19 82       	std	Y+1, r1	; 0x01
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <I2C_READ_NBYTES+0x124>
				break;
			default:
				ret = E_NOK;
     d74:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	if(ret==E_OK)//send data
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	e9 f4       	brne	.+58     	; 0xdb6 <I2C_READ_NBYTES+0x164>
	{
		I2C_WRITE_BYTE(Add | I2C_READ);
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_WRITE_BYTE>
		switch (I2C_STATUS)
     d84:	e1 e2       	ldi	r30, 0x21	; 33
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	38 87       	std	Y+8, r19	; 0x08
     d90:	2f 83       	std	Y+7, r18	; 0x07
     d92:	8f 81       	ldd	r24, Y+7	; 0x07
     d94:	98 85       	ldd	r25, Y+8	; 0x08
     d96:	80 34       	cpi	r24, 0x40	; 64
     d98:	91 05       	cpc	r25, r1
     d9a:	69 f0       	breq	.+26     	; 0xdb6 <I2C_READ_NBYTES+0x164>
     d9c:	2f 81       	ldd	r18, Y+7	; 0x07
     d9e:	38 85       	ldd	r19, Y+8	; 0x08
     da0:	28 34       	cpi	r18, 0x48	; 72
     da2:	31 05       	cpc	r19, r1
     da4:	29 f0       	breq	.+10     	; 0xdb0 <I2C_READ_NBYTES+0x15e>
     da6:	8f 81       	ldd	r24, Y+7	; 0x07
     da8:	98 85       	ldd	r25, Y+8	; 0x08
     daa:	88 33       	cpi	r24, 0x38	; 56
     dac:	91 05       	cpc	r25, r1
     dae:	11 f4       	brne	.+4      	; 0xdb4 <I2C_READ_NBYTES+0x162>
		{
			case TW_MSR_SLA_R_ACK:
				break;
			case TW_MSR_SLA_R_NACK:
			case TWSR_ARBIT_LOSS:
				ret = E_NOK;
     db0:	19 82       	std	Y+1, r1	; 0x01
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <I2C_READ_NBYTES+0x164>
				break;
			default:
				ret = E_NOK;
     db4:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	if (ret == E_OK) {
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	09 f0       	breq	.+2      	; 0xdbe <I2C_READ_NBYTES+0x16c>
     dbc:	40 c0       	rjmp	.+128    	; 0xe3e <I2C_READ_NBYTES+0x1ec>
     dbe:	3c c0       	rjmp	.+120    	; 0xe38 <I2C_READ_NBYTES+0x1e6>
		for(;No_bytes>0;No_bytes--)
		{
				if(No_bytes==1)
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	d9 f4       	brne	.+54     	; 0xdfc <I2C_READ_NBYTES+0x1aa>
				{
					I2C_READ_NACK();
     dc6:	e6 e5       	ldi	r30, 0x56	; 86
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	84 e8       	ldi	r24, 0x84	; 132
     dcc:	80 83       	st	Z, r24
					I2C_WAIT();
     dce:	e6 e5       	ldi	r30, 0x56	; 86
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	88 23       	and	r24, r24
     dd6:	dc f7       	brge	.-10     	; 0xdce <I2C_READ_NBYTES+0x17c>
					*Data++=I2C_WRITE_BUFFER;
     dd8:	e3 e2       	ldi	r30, 0x23	; 35
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	ec 81       	ldd	r30, Y+4	; 0x04
     de0:	fd 81       	ldd	r31, Y+5	; 0x05
     de2:	80 83       	st	Z, r24
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	9d 83       	std	Y+5, r25	; 0x05
     dec:	8c 83       	std	Y+4, r24	; 0x04
					if(I2C_STATUS!=TW_MSR_DATA_R_NACK)
     dee:	e1 e2       	ldi	r30, 0x21	; 33
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 35       	cpi	r24, 0x58	; 88
     df6:	e9 f0       	breq	.+58     	; 0xe32 <I2C_READ_NBYTES+0x1e0>
							ret=E_NOK;
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <I2C_READ_NBYTES+0x1e0>
				}
				else
				{
					I2C_READ_ACK();
     dfc:	e6 e5       	ldi	r30, 0x56	; 86
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	84 ec       	ldi	r24, 0xC4	; 196
     e02:	80 83       	st	Z, r24
					I2C_WAIT();
     e04:	e6 e5       	ldi	r30, 0x56	; 86
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 23       	and	r24, r24
     e0c:	dc f7       	brge	.-10     	; 0xe04 <I2C_READ_NBYTES+0x1b2>
					*Data++ = I2C_WRITE_BUFFER;
     e0e:	e3 e2       	ldi	r30, 0x23	; 35
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	ec 81       	ldd	r30, Y+4	; 0x04
     e16:	fd 81       	ldd	r31, Y+5	; 0x05
     e18:	80 83       	st	Z, r24
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	9d 83       	std	Y+5, r25	; 0x05
     e22:	8c 83       	std	Y+4, r24	; 0x04
					if(I2C_STATUS!=TW_MSR_DATA_R_ACK)
     e24:	e1 e2       	ldi	r30, 0x21	; 33
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 35       	cpi	r24, 0x50	; 80
     e2c:	11 f0       	breq	.+4      	; 0xe32 <I2C_READ_NBYTES+0x1e0>
					{
						ret=E_NOK;
     e2e:	19 82       	std	Y+1, r1	; 0x01
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <I2C_READ_NBYTES+0x1ec>
			default:
				ret = E_NOK;
		}
	}
	if (ret == E_OK) {
		for(;No_bytes>0;No_bytes--)
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	81 50       	subi	r24, 0x01	; 1
     e36:	8e 83       	std	Y+6, r24	; 0x06
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	18 16       	cp	r1, r24
     e3c:	0c f2       	brlt	.-126    	; 0xdc0 <I2C_READ_NBYTES+0x16e>
						break;
					}
				}
		}
	}
	I2C_GEN_STOP_COND();
     e3e:	e6 e5       	ldi	r30, 0x56	; 86
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	84 e9       	ldi	r24, 0x94	; 148
     e44:	80 83       	st	Z, r24
	I2C_WAIT_STOP();
     e46:	e6 e5       	ldi	r30, 0x56	; 86
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	82 95       	swap	r24
     e4e:	8f 70       	andi	r24, 0x0F	; 15
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	81 70       	andi	r24, 0x01	; 1
     e56:	90 70       	andi	r25, 0x00	; 0
     e58:	88 23       	and	r24, r24
     e5a:	a9 f7       	brne	.-22     	; 0xe46 <I2C_READ_NBYTES+0x1f4>
	return ret;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5e:	60 96       	adiw	r28, 0x10	; 16
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <MAX7219_INIT>:
static void CLEAR_DISPLAY_Arr();
static uint8_t no_digits(int32_t data);
static Bool Max7219_Send_DArr(uint8 Address,uint8 Data,uint8 size);

Bool MAX7219_INIT()
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	0f 92       	push	r0
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	Bool ret=E_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
	MAX7219_SEND_Data(DECODE_MODE,EXTERNAL_DECODER);
     e7e:	89 e0       	ldi	r24, 0x09	; 9
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(INTENSITY_REG,INTENSITY_LEVEL7);
     e86:	8a e0       	ldi	r24, 0x0A	; 10
     e88:	67 e0       	ldi	r22, 0x07	; 7
     e8a:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(SCAN_LIM_REG,NO_DIGITS-1);
     e8e:	8b e0       	ldi	r24, 0x0B	; 11
     e90:	67 e0       	ldi	r22, 0x07	; 7
     e92:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(SHUTDOWN_REG,POWER_ON);
     e96:	8c e0       	ldi	r24, 0x0C	; 12
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DISPLAY_TEST_REG,NORMAL_OP);
     e9e:	8f e0       	ldi	r24, 0x0F	; 15
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	return ret;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <MAX7219_INIT_ARR>:

Bool MAX7219_INIT_ARR(uint8 no_segs)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <MAX7219_INIT_ARR+0x6>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	8a 83       	std	Y+2, r24	; 0x02
	Bool ret = E_OK;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	89 83       	std	Y+1, r24	; 0x01
	Max7219_Send_DArr(DECODE_MODE, EXTERNAL_DECODER,no_segs);
     ec0:	89 e0       	ldi	r24, 0x09	; 9
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	4a 81       	ldd	r20, Y+2	; 0x02
     ec6:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(INTENSITY_REG, INTENSITY_LEVEL7,no_segs);
     eca:	8a e0       	ldi	r24, 0x0A	; 10
     ecc:	67 e0       	ldi	r22, 0x07	; 7
     ece:	4a 81       	ldd	r20, Y+2	; 0x02
     ed0:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(SCAN_LIM_REG, NO_DIGITS_DOT_MATRIX - 1,no_segs);
     ed4:	8b e0       	ldi	r24, 0x0B	; 11
     ed6:	67 e0       	ldi	r22, 0x07	; 7
     ed8:	4a 81       	ldd	r20, Y+2	; 0x02
     eda:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(SHUTDOWN_REG, POWER_ON,no_segs);
     ede:	8c e0       	ldi	r24, 0x0C	; 12
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	4a 81       	ldd	r20, Y+2	; 0x02
     ee4:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DISPLAY_TEST_REG, NORMAL_OP,no_segs);
     ee8:	8f e0       	ldi	r24, 0x0F	; 15
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	4a 81       	ldd	r20, Y+2	; 0x02
     eee:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	return ret;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <Max7219_Send_DArr>:

static Bool Max7219_Send_DArr(uint8 Address,uint8 Data,uint8 size)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <Max7219_Send_DArr+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <Max7219_Send_DArr+0x8>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	8b 83       	std	Y+3, r24	; 0x03
     f0e:	6c 83       	std	Y+4, r22	; 0x04
     f10:	4d 83       	std	Y+5, r20	; 0x05
	Bool ret=E_OK;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Seg_no=0;
     f16:	19 82       	std	Y+1, r1	; 0x01
	SPI_CLEAR_SS();
     f18:	a8 e3       	ldi	r26, 0x38	; 56
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e8 e3       	ldi	r30, 0x38	; 56
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8f 7e       	andi	r24, 0xEF	; 239
     f24:	8c 93       	st	X, r24
	for(Seg_no=0;Seg_no<=size-1;Seg_no++)
     f26:	19 82       	std	Y+1, r1	; 0x01
     f28:	0b c0       	rjmp	.+22     	; 0xf40 <Max7219_Send_DArr+0x42>
	{
		ret=SPI_SEND_blocking(Address);
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
     f30:	8a 83       	std	Y+2, r24	; 0x02
		ret=SPI_SEND_blocking(Data);
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
     f38:	8a 83       	std	Y+2, r24	; 0x02
static Bool Max7219_Send_DArr(uint8 Address,uint8 Data,uint8 size)
{
	Bool ret=E_OK;
	uint8 Seg_no=0;
	SPI_CLEAR_SS();
	for(Seg_no=0;Seg_no<=size-1;Seg_no++)
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	82 17       	cp	r24, r18
     f50:	93 07       	cpc	r25, r19
     f52:	5c f7       	brge	.-42     	; 0xf2a <Max7219_Send_DArr+0x2c>
	{
		ret=SPI_SEND_blocking(Address);
		ret=SPI_SEND_blocking(Data);
	}
	SPI_SET_SS();
     f54:	a8 e3       	ldi	r26, 0x38	; 56
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e8 e3       	ldi	r30, 0x38	; 56
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 61       	ori	r24, 0x10	; 16
     f60:	8c 93       	st	X, r24
	return ret;
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <Max7219_Send_DArr_Ddata>:
	SPI_SET_SS();
	return ret;
}
#else
Bool Max7219_Send_DArr_Ddata(uint8 Address,uint8 Data[],uint8 size)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <Max7219_Send_DArr_Ddata+0x6>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <Max7219_Send_DArr_Ddata+0x8>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <Max7219_Send_DArr_Ddata+0xa>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	7d 83       	std	Y+5, r23	; 0x05
     f86:	6c 83       	std	Y+4, r22	; 0x04
     f88:	4e 83       	std	Y+6, r20	; 0x06
	Bool ret = E_OK;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Seg_no = 0;
     f8e:	19 82       	std	Y+1, r1	; 0x01
	SPI_CLEAR_SS();
     f90:	a8 e3       	ldi	r26, 0x38	; 56
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e8 e3       	ldi	r30, 0x38	; 56
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7e       	andi	r24, 0xEF	; 239
     f9c:	8c 93       	st	X, r24
	for (Seg_no = 0; Seg_no <= size - 1; Seg_no++) {
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	19 c0       	rjmp	.+50     	; 0xfd4 <Max7219_Send_DArr_Ddata+0x60>
		ret = SPI_SEND_blocking(Address);
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
     fa8:	8a 83       	std	Y+2, r24	; 0x02
		ret = SPI_SEND_blocking(MAX721DIG[Data[Seg_no]]);
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	9d 81       	ldd	r25, Y+5	; 0x05
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	80 81       	ld	r24, Z
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	fc 01       	movw	r30, r24
     fc2:	e4 57       	subi	r30, 0x74	; 116
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
     fcc:	8a 83       	std	Y+2, r24	; 0x02
Bool Max7219_Send_DArr_Ddata(uint8 Address,uint8 Data[],uint8 size)
{
	Bool ret = E_OK;
	uint8 Seg_no = 0;
	SPI_CLEAR_SS();
	for (Seg_no = 0; Seg_no <= size - 1; Seg_no++) {
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	82 17       	cp	r24, r18
     fe4:	93 07       	cpc	r25, r19
     fe6:	ec f6       	brge	.-70     	; 0xfa2 <Max7219_Send_DArr_Ddata+0x2e>
		ret = SPI_SEND_blocking(Address);
		ret = SPI_SEND_blocking(MAX721DIG[Data[Seg_no]]);
	}
	SPI_SET_SS();
     fe8:	a8 e3       	ldi	r26, 0x38	; 56
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e8 e3       	ldi	r30, 0x38	; 56
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 61       	ori	r24, 0x10	; 16
     ff4:	8c 93       	st	X, r24
	return ret;
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ff8:	26 96       	adiw	r28, 0x06	; 6
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <Max7219_disp_string>:
uint8 diff;

Bool Max7219_disp_string(char *str)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	28 97       	sbiw	r28, 0x08	; 8
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	98 87       	std	Y+8, r25	; 0x08
    1020:	8f 83       	std	Y+7, r24	; 0x07
	Bool E_state=E_OK;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	8e 83       	std	Y+6, r24	; 0x06
	uint8 len=0;
    1026:	1d 82       	std	Y+5, r1	; 0x05
	uint8 Address_Cnt=1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Digit_Cnt=0;
    102c:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Str_Cnt=0;
    102e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Max=0;
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	03 c0       	rjmp	.+6      	; 0x103a <Max7219_disp_string+0x30>
	while(*(str+len)!='\0')//calculate length of string
		len++;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	8d 83       	std	Y+5, r24	; 0x05
	uint8 len=0;
	uint8 Address_Cnt=1;
	uint8 Digit_Cnt=0;
	uint8 Str_Cnt=0;
	uint8 Max=0;
	while(*(str+len)!='\0')//calculate length of string
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	98 85       	ldd	r25, Y+8	; 0x08
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	80 81       	ld	r24, Z
    104c:	88 23       	and	r24, r24
    104e:	91 f7       	brne	.-28     	; 0x1034 <Max7219_disp_string+0x2a>
		len++;
	if(len<NO_DIGITS)
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	20 f4       	brcc	.+8      	; 0x105e <Max7219_disp_string+0x54>
		Max=len-1;
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	81 50       	subi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <Max7219_disp_string+0x58>
	else
		Max=NO_DIGITS-1;
    105e:	87 e0       	ldi	r24, 0x07	; 7
    1060:	89 83       	std	Y+1, r24	; 0x01
	for(Address_Cnt=1;Address_Cnt<=8;Address_Cnt++)
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	8c 83       	std	Y+4, r24	; 0x04
    1066:	7e c0       	rjmp	.+252    	; 0x1164 <Max7219_disp_string+0x15a>
	{
		SPI_CLEAR_SS();
    1068:	a8 e3       	ldi	r26, 0x38	; 56
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e8 e3       	ldi	r30, 0x38	; 56
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8f 7e       	andi	r24, 0xEF	; 239
    1074:	8c 93       	st	X, r24
		for(Digit_Cnt=0;Digit_Cnt<=Max;Digit_Cnt++)
    1076:	1b 82       	std	Y+3, r1	; 0x03
    1078:	65 c0       	rjmp	.+202    	; 0x1144 <Max7219_disp_string+0x13a>
		{
			E_state = SPI_SEND_blocking(Address_Cnt); //turn on first row
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
    1080:	8e 83       	std	Y+6, r24	; 0x06
			diff = Pattern[str[len - Str_Cnt - 1] - 32][Address_Cnt - 1];
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	48 1b       	sub	r20, r24
    1092:	59 0b       	sbc	r21, r25
    1094:	ca 01       	movw	r24, r20
    1096:	9c 01       	movw	r18, r24
    1098:	21 50       	subi	r18, 0x01	; 1
    109a:	30 40       	sbci	r19, 0x00	; 0
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	fc 01       	movw	r30, r24
    10a2:	e2 0f       	add	r30, r18
    10a4:	f3 1f       	adc	r31, r19
    10a6:	80 81       	ld	r24, Z
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	ac 01       	movw	r20, r24
    10ae:	40 52       	subi	r20, 0x20	; 32
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 01       	movw	r18, r24
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	30 40       	sbci	r19, 0x00	; 0
    10be:	ca 01       	movw	r24, r20
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	fc 01       	movw	r30, r24
    10d2:	e7 56       	subi	r30, 0x67	; 103
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	80 93 e4 03 	sts	0x03E4, r24
			E_state = SPI_SEND_blocking(
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	48 1b       	sub	r20, r24
    10ec:	59 0b       	sbc	r21, r25
    10ee:	ca 01       	movw	r24, r20
    10f0:	9c 01       	movw	r18, r24
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	30 40       	sbci	r19, 0x00	; 0
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	80 81       	ld	r24, Z
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	ac 01       	movw	r20, r24
    1108:	40 52       	subi	r20, 0x20	; 32
    110a:	50 40       	sbci	r21, 0x00	; 0
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 01       	movw	r18, r24
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	30 40       	sbci	r19, 0x00	; 0
    1118:	ca 01       	movw	r24, r20
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	fc 01       	movw	r30, r24
    112c:	e7 56       	subi	r30, 0x67	; 103
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
    1136:	8e 83       	std	Y+6, r24	; 0x06
					Pattern[str[len - Str_Cnt - 1] - 32][Address_Cnt - 1]);
			Str_Cnt++;
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	8a 83       	std	Y+2, r24	; 0x02
	else
		Max=NO_DIGITS-1;
	for(Address_Cnt=1;Address_Cnt<=8;Address_Cnt++)
	{
		SPI_CLEAR_SS();
		for(Digit_Cnt=0;Digit_Cnt<=Max;Digit_Cnt++)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	8b 83       	std	Y+3, r24	; 0x03
    1144:	9b 81       	ldd	r25, Y+3	; 0x03
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	89 17       	cp	r24, r25
    114a:	08 f0       	brcs	.+2      	; 0x114e <Max7219_disp_string+0x144>
    114c:	96 cf       	rjmp	.-212    	; 0x107a <Max7219_disp_string+0x70>
			diff = Pattern[str[len - Str_Cnt - 1] - 32][Address_Cnt - 1];
			E_state = SPI_SEND_blocking(
					Pattern[str[len - Str_Cnt - 1] - 32][Address_Cnt - 1]);
			Str_Cnt++;
		}
		Str_Cnt=0;
    114e:	1a 82       	std	Y+2, r1	; 0x02
		SPI_SET_SS();
    1150:	a8 e3       	ldi	r26, 0x38	; 56
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 e3       	ldi	r30, 0x38	; 56
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	80 61       	ori	r24, 0x10	; 16
    115c:	8c 93       	st	X, r24
		len++;
	if(len<NO_DIGITS)
		Max=len-1;
	else
		Max=NO_DIGITS-1;
	for(Address_Cnt=1;Address_Cnt<=8;Address_Cnt++)
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	8c 83       	std	Y+4, r24	; 0x04
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	89 30       	cpi	r24, 0x09	; 9
    1168:	08 f4       	brcc	.+2      	; 0x116c <Max7219_disp_string+0x162>
    116a:	7e cf       	rjmp	.-260    	; 0x1068 <Max7219_disp_string+0x5e>
			Str_Cnt++;
		}
		Str_Cnt=0;
		SPI_SET_SS();
	}
	return E_state;
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    116e:	28 96       	adiw	r28, 0x08	; 8
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <Convert_digs>:
#endif

static void Convert_digs(int32 Num,uint8 Arr[])
{
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	27 97       	sbiw	r28, 0x07	; 7
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	6a 83       	std	Y+2, r22	; 0x02
    119a:	7b 83       	std	Y+3, r23	; 0x03
    119c:	8c 83       	std	Y+4, r24	; 0x04
    119e:	9d 83       	std	Y+5, r25	; 0x05
    11a0:	5f 83       	std	Y+7, r21	; 0x07
    11a2:	4e 83       	std	Y+6, r20	; 0x06
	int8 size=0;
    11a4:	19 82       	std	Y+1, r1	; 0x01
    11a6:	2f c0       	rjmp	.+94     	; 0x1206 <Convert_digs+0x86>
	while(Num!=0)
	{
		Arr[size++]=Num%10;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	33 27       	eor	r19, r19
    11ae:	27 fd       	sbrc	r18, 7
    11b0:	30 95       	com	r19
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	8c 01       	movw	r16, r24
    11b8:	02 0f       	add	r16, r18
    11ba:	13 1f       	adc	r17, r19
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	ac 81       	ldd	r26, Y+4	; 0x04
    11c2:	bd 81       	ldd	r27, Y+5	; 0x05
    11c4:	2a e0       	ldi	r18, 0x0A	; 10
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	f8 01       	movw	r30, r16
    11da:	80 83       	st	Z, r24
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	89 83       	std	Y+1, r24	; 0x01
		Num/=10;
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	ac 81       	ldd	r26, Y+4	; 0x04
    11e8:	bd 81       	ldd	r27, Y+5	; 0x05
    11ea:	2a e0       	ldi	r18, 0x0A	; 10
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    11fa:	da 01       	movw	r26, r20
    11fc:	c9 01       	movw	r24, r18
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	9b 83       	std	Y+3, r25	; 0x03
    1202:	ac 83       	std	Y+4, r26	; 0x04
    1204:	bd 83       	std	Y+5, r27	; 0x05
#endif

static void Convert_digs(int32 Num,uint8 Arr[])
{
	int8 size=0;
	while(Num!=0)
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	ac 81       	ldd	r26, Y+4	; 0x04
    120c:	bd 81       	ldd	r27, Y+5	; 0x05
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	a1 05       	cpc	r26, r1
    1212:	b1 05       	cpc	r27, r1
    1214:	49 f6       	brne	.-110    	; 0x11a8 <Convert_digs+0x28>
	{
		Arr[size++]=Num%10;
		Num/=10;
	}
}
    1216:	27 96       	adiw	r28, 0x07	; 7
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <MAX7219Disp_float_num>:

void MAX7219Disp_float_num(float Val,Bool Temp_flag,uint32 Num)
{
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	62 97       	sbiw	r28, 0x12	; 18
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	6a 87       	std	Y+10, r22	; 0x0a
    1246:	7b 87       	std	Y+11, r23	; 0x0b
    1248:	8c 87       	std	Y+12, r24	; 0x0c
    124a:	9d 87       	std	Y+13, r25	; 0x0d
    124c:	4e 87       	std	Y+14, r20	; 0x0e
    124e:	0f 87       	std	Y+15, r16	; 0x0f
    1250:	18 8b       	std	Y+16, r17	; 0x10
    1252:	29 8b       	std	Y+17, r18	; 0x11
    1254:	3a 8b       	std	Y+18, r19	; 0x12
	Bool flag=0,flag_2=0;
    1256:	1f 82       	std	Y+7, r1	; 0x07
    1258:	1e 82       	std	Y+6, r1	; 0x06
	int8 Counter=DIGIT_5;
    125a:	86 e0       	ldi	r24, 0x06	; 6
    125c:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Arr[2];
	int32 int_val=Val*1000;
    125e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1260:	7b 85       	ldd	r23, Y+11	; 0x0b
    1262:	8c 85       	ldd	r24, Y+12	; 0x0c
    1264:	9d 85       	ldd	r25, Y+13	; 0x0d
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4a e7       	ldi	r20, 0x7A	; 122
    126c:	54 e4       	ldi	r21, 0x44	; 68
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 43 01 	call	0x286	; 0x286 <__fixsfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	ab 83       	std	Y+3, r26	; 0x03
    1288:	bc 83       	std	Y+4, r27	; 0x04

	Convert_digs(Num,Data_arr);
    128a:	8f 85       	ldd	r24, Y+15	; 0x0f
    128c:	98 89       	ldd	r25, Y+16	; 0x10
    128e:	a9 89       	ldd	r26, Y+17	; 0x11
    1290:	ba 89       	ldd	r27, Y+18	; 0x12
    1292:	28 ed       	ldi	r18, 0xD8	; 216
    1294:	33 e0       	ldi	r19, 0x03	; 3
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	a9 01       	movw	r20, r18
    129c:	0e 94 c0 08 	call	0x1180	; 0x1180 <Convert_digs>
	Convert_digs(int_val,Data_arr_2);
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	ab 81       	ldd	r26, Y+3	; 0x03
    12a6:	bc 81       	ldd	r27, Y+4	; 0x04
    12a8:	2e ed       	ldi	r18, 0xDE	; 222
    12aa:	33 e0       	ldi	r19, 0x03	; 3
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	a9 01       	movw	r20, r18
    12b2:	0e 94 c0 08 	call	0x1180	; 0x1180 <Convert_digs>
	CLEAR_DISPLAY_Arr();
    12b6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <CLEAR_DISPLAY_Arr>
	for(Counter=DIGIT_5;Counter>=1;Counter--)
    12ba:	86 e0       	ldi	r24, 0x06	; 6
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    12be:	29 c0       	rjmp	.+82     	; 0x1312 <MAX7219Disp_float_num+0xe6>
	{
		Arr[0] = Data_arr[DIGIT_5-Counter];
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	28 2f       	mov	r18, r24
    12c4:	33 27       	eor	r19, r19
    12c6:	27 fd       	sbrc	r18, 7
    12c8:	30 95       	com	r19
    12ca:	86 e0       	ldi	r24, 0x06	; 6
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	82 1b       	sub	r24, r18
    12d0:	93 0b       	sbc	r25, r19
    12d2:	fc 01       	movw	r30, r24
    12d4:	e8 52       	subi	r30, 0x28	; 40
    12d6:	fc 4f       	sbci	r31, 0xFC	; 252
    12d8:	80 81       	ld	r24, Z
    12da:	88 87       	std	Y+8, r24	; 0x08
		Arr[1] = Data_arr_2[DIGIT_5-Counter];
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	28 2f       	mov	r18, r24
    12e0:	33 27       	eor	r19, r19
    12e2:	27 fd       	sbrc	r18, 7
    12e4:	30 95       	com	r19
    12e6:	86 e0       	ldi	r24, 0x06	; 6
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	82 1b       	sub	r24, r18
    12ec:	93 0b       	sbc	r25, r19
    12ee:	fc 01       	movw	r30, r24
    12f0:	e2 52       	subi	r30, 0x22	; 34
    12f2:	fc 4f       	sbci	r31, 0xFC	; 252
    12f4:	80 81       	ld	r24, Z
    12f6:	89 87       	std	Y+9, r24	; 0x09
		if(Counter==DIGIT_2)
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	11 f4       	brne	.+4      	; 0x1302 <MAX7219Disp_float_num+0xd6>
			flag=1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	8f 83       	std	Y+7, r24	; 0x07
		if(Counter==DIGIT_5)
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	86 30       	cpi	r24, 0x06	; 6
    1306:	11 f4       	brne	.+4      	; 0x130c <MAX7219Disp_float_num+0xe0>
			flag_2=1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	8e 83       	std	Y+6, r24	; 0x06
	int32 int_val=Val*1000;

	Convert_digs(Num,Data_arr);
	Convert_digs(int_val,Data_arr_2);
	CLEAR_DISPLAY_Arr();
	for(Counter=DIGIT_5;Counter>=1;Counter--)
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	81 50       	subi	r24, 0x01	; 1
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	18 16       	cp	r1, r24
    1316:	a4 f2       	brlt	.-88     	; 0x12c0 <MAX7219Disp_float_num+0x94>
			flag_2=1;
#ifndef LCD_MODE_ON
		Max7219_Send_DArr_Ddata(Counter, Arr, 2,&flag,&flag_2);
#endif
	}
}
    1318:	62 96       	adiw	r28, 0x12	; 18
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	08 95       	ret

0000132e <MAX7219_SEND_Data>:

Bool MAX7219_SEND_Data(uint8 Address,uint8 Data)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <MAX7219_SEND_Data+0x6>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6b 83       	std	Y+3, r22	; 0x03
	Bool ret;
	SPI_CLEAR_SS();
    133e:	a8 e3       	ldi	r26, 0x38	; 56
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e8 e3       	ldi	r30, 0x38	; 56
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8f 7e       	andi	r24, 0xEF	; 239
    134a:	8c 93       	st	X, r24
	ret=SPI_SEND_blocking(Address);
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
    1352:	89 83       	std	Y+1, r24	; 0x01
	ret=SPI_SEND_blocking(Data);
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
    135a:	89 83       	std	Y+1, r24	; 0x01
	SPI_SET_SS();
    135c:	a8 e3       	ldi	r26, 0x38	; 56
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 61       	ori	r24, 0x10	; 16
    1368:	8c 93       	st	X, r24
	return ret;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <CLEAR_DISPLAY>:

static void CLEAR_DISPLAY()
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	MAX7219_SEND_Data(DIGIT_7, MAX721DIG[0]);
    1380:	90 91 8c 00 	lds	r25, 0x008C
    1384:	88 e0       	ldi	r24, 0x08	; 8
    1386:	69 2f       	mov	r22, r25
    1388:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_6, MAX721DIG[0]);
    138c:	90 91 8c 00 	lds	r25, 0x008C
    1390:	87 e0       	ldi	r24, 0x07	; 7
    1392:	69 2f       	mov	r22, r25
    1394:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_5, MAX721DIG[0]);
    1398:	90 91 8c 00 	lds	r25, 0x008C
    139c:	86 e0       	ldi	r24, 0x06	; 6
    139e:	69 2f       	mov	r22, r25
    13a0:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_4, MAX721DIG[0]);
    13a4:	90 91 8c 00 	lds	r25, 0x008C
    13a8:	85 e0       	ldi	r24, 0x05	; 5
    13aa:	69 2f       	mov	r22, r25
    13ac:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_3, MAX721DIG[0]);
    13b0:	90 91 8c 00 	lds	r25, 0x008C
    13b4:	84 e0       	ldi	r24, 0x04	; 4
    13b6:	69 2f       	mov	r22, r25
    13b8:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_2, MAX721DIG[0]);
    13bc:	90 91 8c 00 	lds	r25, 0x008C
    13c0:	83 e0       	ldi	r24, 0x03	; 3
    13c2:	69 2f       	mov	r22, r25
    13c4:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_1, MAX721DIG[0]);
    13c8:	90 91 8c 00 	lds	r25, 0x008C
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	69 2f       	mov	r22, r25
    13d0:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
	MAX7219_SEND_Data(DIGIT_0, MAX721DIG[0]);
    13d4:	90 91 8c 00 	lds	r25, 0x008C
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	69 2f       	mov	r22, r25
    13dc:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <CLEAR_DISPLAY_Arr>:

static void CLEAR_DISPLAY_Arr()
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	Max7219_Send_DArr(DIGIT_7, MAX721DIG[0],2);
    13ee:	90 91 8c 00 	lds	r25, 0x008C
    13f2:	88 e0       	ldi	r24, 0x08	; 8
    13f4:	69 2f       	mov	r22, r25
    13f6:	42 e0       	ldi	r20, 0x02	; 2
    13f8:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_6, MAX721DIG[0],2);
    13fc:	90 91 8c 00 	lds	r25, 0x008C
    1400:	87 e0       	ldi	r24, 0x07	; 7
    1402:	69 2f       	mov	r22, r25
    1404:	42 e0       	ldi	r20, 0x02	; 2
    1406:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_5, MAX721DIG[0],2);
    140a:	90 91 8c 00 	lds	r25, 0x008C
    140e:	86 e0       	ldi	r24, 0x06	; 6
    1410:	69 2f       	mov	r22, r25
    1412:	42 e0       	ldi	r20, 0x02	; 2
    1414:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_4, MAX721DIG[0],2);
    1418:	90 91 8c 00 	lds	r25, 0x008C
    141c:	85 e0       	ldi	r24, 0x05	; 5
    141e:	69 2f       	mov	r22, r25
    1420:	42 e0       	ldi	r20, 0x02	; 2
    1422:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_3, MAX721DIG[0],2);
    1426:	90 91 8c 00 	lds	r25, 0x008C
    142a:	84 e0       	ldi	r24, 0x04	; 4
    142c:	69 2f       	mov	r22, r25
    142e:	42 e0       	ldi	r20, 0x02	; 2
    1430:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_2, MAX721DIG[0],2);
    1434:	90 91 8c 00 	lds	r25, 0x008C
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	69 2f       	mov	r22, r25
    143c:	42 e0       	ldi	r20, 0x02	; 2
    143e:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_1, MAX721DIG[0],2);
    1442:	90 91 8c 00 	lds	r25, 0x008C
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	69 2f       	mov	r22, r25
    144a:	42 e0       	ldi	r20, 0x02	; 2
    144c:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
	Max7219_Send_DArr(DIGIT_0, MAX721DIG[0],2);
    1450:	90 91 8c 00 	lds	r25, 0x008C
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	69 2f       	mov	r22, r25
    1458:	42 e0       	ldi	r20, 0x02	; 2
    145a:	0e 94 7f 07 	call	0xefe	; 0xefe <Max7219_Send_DArr>
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <no_digits>:

static uint8_t no_digits(int32_t data)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <no_digits+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <no_digits+0x8>
    146c:	00 d0       	rcall	.+0      	; 0x146e <no_digits+0xa>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	6b 83       	std	Y+3, r22	; 0x03
    1474:	7c 83       	std	Y+4, r23	; 0x04
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	9e 83       	std	Y+6, r25	; 0x06
	int len=0;
    147a:	1a 82       	std	Y+2, r1	; 0x02
    147c:	19 82       	std	Y+1, r1	; 0x01
    147e:	17 c0       	rjmp	.+46     	; 0x14ae <no_digits+0x4a>
	while(data!=0)
	{
		data/=10;
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	ad 81       	ldd	r26, Y+5	; 0x05
    1486:	be 81       	ldd	r27, Y+6	; 0x06
    1488:	2a e0       	ldi	r18, 0x0A	; 10
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    1498:	da 01       	movw	r26, r20
    149a:	c9 01       	movw	r24, r18
    149c:	8b 83       	std	Y+3, r24	; 0x03
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	ad 83       	std	Y+5, r26	; 0x05
    14a2:	be 83       	std	Y+6, r27	; 0x06
		len++;
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	89 83       	std	Y+1, r24	; 0x01
}

static uint8_t no_digits(int32_t data)
{
	int len=0;
	while(data!=0)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	ad 81       	ldd	r26, Y+5	; 0x05
    14b4:	be 81       	ldd	r27, Y+6	; 0x06
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	a1 05       	cpc	r26, r1
    14ba:	b1 05       	cpc	r27, r1
    14bc:	09 f7       	brne	.-62     	; 0x1480 <no_digits+0x1c>
	{
		data/=10;
		len++;
	}
	return len;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	26 96       	adiw	r28, 0x06	; 6
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <MAX7219Disp_Number>:


void MAX7219Disp_Number(int32_t data)
{
    14d2:	1f 93       	push	r17
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	27 97       	sbiw	r28, 0x07	; 7
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	6c 83       	std	Y+4, r22	; 0x04
    14ea:	7d 83       	std	Y+5, r23	; 0x05
    14ec:	8e 83       	std	Y+6, r24	; 0x06
    14ee:	9f 83       	std	Y+7, r25	; 0x07
		Bool neg_flag=0;
    14f0:	1b 82       	std	Y+3, r1	; 0x03
		if(data==0)
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	ae 81       	ldd	r26, Y+6	; 0x06
    14f8:	bf 81       	ldd	r27, Y+7	; 0x07
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	a1 05       	cpc	r26, r1
    14fe:	b1 05       	cpc	r27, r1
    1500:	19 f4       	brne	.+6      	; 0x1508 <MAX7219Disp_Number+0x36>
			CLEAR_DISPLAY();
    1502:	0e 94 bc 09 	call	0x1378	; 0x1378 <CLEAR_DISPLAY>
    1506:	17 c0       	rjmp	.+46     	; 0x1536 <MAX7219Disp_Number+0x64>
		else if(data<0)
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	ae 81       	ldd	r26, Y+6	; 0x06
    150e:	bf 81       	ldd	r27, Y+7	; 0x07
    1510:	bb 23       	and	r27, r27
    1512:	8c f4       	brge	.+34     	; 0x1536 <MAX7219Disp_Number+0x64>
		{
			neg_flag=1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	8b 83       	std	Y+3, r24	; 0x03
			data*=-1;
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	ae 81       	ldd	r26, Y+6	; 0x06
    151e:	bf 81       	ldd	r27, Y+7	; 0x07
    1520:	b0 95       	com	r27
    1522:	a0 95       	com	r26
    1524:	90 95       	com	r25
    1526:	81 95       	neg	r24
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	af 4f       	sbci	r26, 0xFF	; 255
    152c:	bf 4f       	sbci	r27, 0xFF	; 255
    152e:	8c 83       	std	Y+4, r24	; 0x04
    1530:	9d 83       	std	Y+5, r25	; 0x05
    1532:	ae 83       	std	Y+6, r26	; 0x06
    1534:	bf 83       	std	Y+7, r27	; 0x07
		}
		if(data!=0)
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	ae 81       	ldd	r26, Y+6	; 0x06
    153c:	bf 81       	ldd	r27, Y+7	; 0x07
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	a1 05       	cpc	r26, r1
    1542:	b1 05       	cpc	r27, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <MAX7219Disp_Number+0x76>
    1546:	50 c0       	rjmp	.+160    	; 0x15e8 <MAX7219Disp_Number+0x116>
		{
			CLEAR_DISPLAY();
    1548:	0e 94 bc 09 	call	0x1378	; 0x1378 <CLEAR_DISPLAY>
			uint8_t dig = no_digits(data);
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	ae 81       	ldd	r26, Y+6	; 0x06
    1552:	bf 81       	ldd	r27, Y+7	; 0x07
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 32 0a 	call	0x1464	; 0x1464 <no_digits>
    155c:	8a 83       	std	Y+2, r24	; 0x02
			uint8_t Cnt = 0;
    155e:	19 82       	std	Y+1, r1	; 0x01
			if (neg_flag == 1) {
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	39 f4       	brne	.+14     	; 0x1574 <MAX7219Disp_Number+0xa2>
				MAX7219_SEND_Data(dig + 1, MAX721DIG[11]);
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	90 91 97 00 	lds	r25, 0x0097
    156e:	69 2f       	mov	r22, r25
    1570:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
			}
			for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    1574:	19 82       	std	Y+1, r1	; 0x01
    1576:	2e c0       	rjmp	.+92     	; 0x15d4 <MAX7219Disp_Number+0x102>
				MAX7219_SEND_Data(Cnt + 1, MAX721DIG[data % 10]);
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	18 2f       	mov	r17, r24
    157c:	1f 5f       	subi	r17, 0xFF	; 255
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	ae 81       	ldd	r26, Y+6	; 0x06
    1584:	bf 81       	ldd	r27, Y+7	; 0x07
    1586:	2a e0       	ldi	r18, 0x0A	; 10
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	bc 01       	movw	r22, r24
    1590:	cd 01       	movw	r24, r26
    1592:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	fc 01       	movw	r30, r24
    159c:	e4 57       	subi	r30, 0x74	; 116
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	90 81       	ld	r25, Z
    15a2:	81 2f       	mov	r24, r17
    15a4:	69 2f       	mov	r22, r25
    15a6:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
				data /= 10;
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	ae 81       	ldd	r26, Y+6	; 0x06
    15b0:	bf 81       	ldd	r27, Y+7	; 0x07
    15b2:	2a e0       	ldi	r18, 0x0A	; 10
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    15c2:	da 01       	movw	r26, r20
    15c4:	c9 01       	movw	r24, r18
    15c6:	8c 83       	std	Y+4, r24	; 0x04
    15c8:	9d 83       	std	Y+5, r25	; 0x05
    15ca:	ae 83       	std	Y+6, r26	; 0x06
    15cc:	bf 83       	std	Y+7, r27	; 0x07
			uint8_t dig = no_digits(data);
			uint8_t Cnt = 0;
			if (neg_flag == 1) {
				MAX7219_SEND_Data(dig + 1, MAX721DIG[11]);
			}
			for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	82 17       	cp	r24, r18
    15e4:	93 07       	cpc	r25, r19
    15e6:	44 f6       	brge	.-112    	; 0x1578 <MAX7219Disp_Number+0xa6>
				MAX7219_SEND_Data(Cnt + 1, MAX721DIG[data % 10]);
				data /= 10;
			}
		}
}
    15e8:	27 96       	adiw	r28, 0x07	; 7
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	1f 91       	pop	r17
    15fa:	08 95       	ret

000015fc <MAX7219Disp_float>:

void MAX7219Disp_float(float Val,Bool Temp_flag)
{
    15fc:	1f 93       	push	r17
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	2b 97       	sbiw	r28, 0x0b	; 11
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	6f 83       	std	Y+7, r22	; 0x07
    1614:	78 87       	std	Y+8, r23	; 0x08
    1616:	89 87       	std	Y+9, r24	; 0x09
    1618:	9a 87       	std	Y+10, r25	; 0x0a
    161a:	4b 87       	std	Y+11, r20	; 0x0b
	int32 int_val=Val*1000;
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	4a e7       	ldi	r20, 0x7A	; 122
    162a:	54 e4       	ldi	r21, 0x44	; 68
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 43 01 	call	0x286	; 0x286 <__fixsfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8b 83       	std	Y+3, r24	; 0x03
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	ad 83       	std	Y+5, r26	; 0x05
    1646:	be 83       	std	Y+6, r27	; 0x06
	CLEAR_DISPLAY();
    1648:	0e 94 bc 09 	call	0x1378	; 0x1378 <CLEAR_DISPLAY>
	uint8_t dig = no_digits(int_val);
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	ad 81       	ldd	r26, Y+5	; 0x05
    1652:	be 81       	ldd	r27, Y+6	; 0x06
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 32 0a 	call	0x1464	; 0x1464 <no_digits>
    165c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Cnt = 0;
    165e:	19 82       	std	Y+1, r1	; 0x01
	for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    1660:	19 82       	std	Y+1, r1	; 0x01
    1662:	5b c0       	rjmp	.+182    	; 0x171a <MAX7219Disp_float+0x11e>
		if(Cnt==0&&Temp_flag)
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	88 23       	and	r24, r24
    1668:	59 f4       	brne	.+22     	; 0x1680 <MAX7219Disp_float+0x84>
    166a:	8b 85       	ldd	r24, Y+11	; 0x0b
    166c:	88 23       	and	r24, r24
    166e:	41 f0       	breq	.+16     	; 0x1680 <MAX7219Disp_float+0x84>
			MAX7219_SEND_Data(Cnt + 1, MAX721DIG[12]);
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	90 91 98 00 	lds	r25, 0x0098
    1678:	69 2f       	mov	r22, r25
    167a:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
    167e:	38 c0       	rjmp	.+112    	; 0x16f0 <MAX7219Disp_float+0xf4>
		else if(Cnt==3)
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	e1 f4       	brne	.+56     	; 0x16be <MAX7219Disp_float+0xc2>
			MAX7219_SEND_Data(Cnt + 1, (MAX721DIG[(int_val % 10)]|0x80));
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	18 2f       	mov	r17, r24
    168a:	1f 5f       	subi	r17, 0xFF	; 255
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	ad 81       	ldd	r26, Y+5	; 0x05
    1692:	be 81       	ldd	r27, Y+6	; 0x06
    1694:	2a e0       	ldi	r18, 0x0A	; 10
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	fc 01       	movw	r30, r24
    16aa:	e4 57       	subi	r30, 0x74	; 116
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	98 2f       	mov	r25, r24
    16b2:	90 68       	ori	r25, 0x80	; 128
    16b4:	81 2f       	mov	r24, r17
    16b6:	69 2f       	mov	r22, r25
    16b8:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
    16bc:	19 c0       	rjmp	.+50     	; 0x16f0 <MAX7219Disp_float+0xf4>
		else
			MAX7219_SEND_Data(Cnt + 1, MAX721DIG[int_val % 10]);
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	18 2f       	mov	r17, r24
    16c2:	1f 5f       	subi	r17, 0xFF	; 255
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	ad 81       	ldd	r26, Y+5	; 0x05
    16ca:	be 81       	ldd	r27, Y+6	; 0x06
    16cc:	2a e0       	ldi	r18, 0x0A	; 10
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	fc 01       	movw	r30, r24
    16e2:	e4 57       	subi	r30, 0x74	; 116
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	90 81       	ld	r25, Z
    16e8:	81 2f       	mov	r24, r17
    16ea:	69 2f       	mov	r22, r25
    16ec:	0e 94 97 09 	call	0x132e	; 0x132e <MAX7219_SEND_Data>
		int_val /= 10;
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	ad 81       	ldd	r26, Y+5	; 0x05
    16f6:	be 81       	ldd	r27, Y+6	; 0x06
    16f8:	2a e0       	ldi	r18, 0x0A	; 10
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 38 12 	call	0x2470	; 0x2470 <__divmodsi4>
    1708:	da 01       	movw	r26, r20
    170a:	c9 01       	movw	r24, r18
    170c:	8b 83       	std	Y+3, r24	; 0x03
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	ad 83       	std	Y+5, r26	; 0x05
    1712:	be 83       	std	Y+6, r27	; 0x06
{
	int32 int_val=Val*1000;
	CLEAR_DISPLAY();
	uint8_t dig = no_digits(int_val);
	uint8_t Cnt = 0;
	for (Cnt = 0; Cnt <= dig - 1; Cnt++) {
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	82 17       	cp	r24, r18
    172a:	93 07       	cpc	r25, r19
    172c:	0c f0       	brlt	.+2      	; 0x1730 <MAX7219Disp_float+0x134>
    172e:	9a cf       	rjmp	.-204    	; 0x1664 <MAX7219Disp_float+0x68>
			MAX7219_SEND_Data(Cnt + 1, (MAX721DIG[(int_val % 10)]|0x80));
		else
			MAX7219_SEND_Data(Cnt + 1, MAX721DIG[int_val % 10]);
		int_val /= 10;
	}
}
    1730:	2b 96       	adiw	r28, 0x0b	; 11
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	1f 91       	pop	r17
    1742:	08 95       	ret

00001744 <RTCDS1307_SET_TIME>:
 */
#include "RTCDS1307.h"


Bool RTCDS1307_SET_TIME(uint8 Mode,uint8 Sec,uint8 Mins,uint8 Hrs)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	2a 97       	sbiw	r28, 0x0a	; 10
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	6e 83       	std	Y+6, r22	; 0x06
    175c:	4f 83       	std	Y+7, r20	; 0x07
    175e:	28 87       	std	Y+8, r18	; 0x08
	Bool E_stat=E_OK;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
	uint8 Time_Arr[3];
	if((Sec>59)||(Mins>59))
    1764:	8e 81       	ldd	r24, Y+6	; 0x06
    1766:	8c 33       	cpi	r24, 0x3C	; 60
    1768:	18 f4       	brcc	.+6      	; 0x1770 <RTCDS1307_SET_TIME+0x2c>
    176a:	8f 81       	ldd	r24, Y+7	; 0x07
    176c:	8c 33       	cpi	r24, 0x3C	; 60
    176e:	08 f0       	brcs	.+2      	; 0x1772 <RTCDS1307_SET_TIME+0x2e>
		E_stat=E_NOK;
    1770:	19 82       	std	Y+1, r1	; 0x01
	if((Mode==MODE_24H&&Hrs>23)||(Mode!=MODE_24H&&Hrs>12))
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	88 23       	and	r24, r24
    1776:	19 f4       	brne	.+6      	; 0x177e <RTCDS1307_SET_TIME+0x3a>
    1778:	88 85       	ldd	r24, Y+8	; 0x08
    177a:	88 31       	cpi	r24, 0x18	; 24
    177c:	30 f4       	brcc	.+12     	; 0x178a <RTCDS1307_SET_TIME+0x46>
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	88 23       	and	r24, r24
    1782:	21 f0       	breq	.+8      	; 0x178c <RTCDS1307_SET_TIME+0x48>
    1784:	88 85       	ldd	r24, Y+8	; 0x08
    1786:	8d 30       	cpi	r24, 0x0D	; 13
    1788:	08 f0       	brcs	.+2      	; 0x178c <RTCDS1307_SET_TIME+0x48>
		E_stat=E_NOK;
    178a:	19 82       	std	Y+1, r1	; 0x01
	if(E_stat==E_OK)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	09 f0       	breq	.+2      	; 0x1794 <RTCDS1307_SET_TIME+0x50>
    1792:	5f c0       	rjmp	.+190    	; 0x1852 <RTCDS1307_SET_TIME+0x10e>
	{
		Time_Arr[0]=((Sec/10)<<4)+Sec%10;
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9a e0       	ldi	r25, 0x0A	; 10
    1798:	69 2f       	mov	r22, r25
    179a:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    179e:	28 2f       	mov	r18, r24
    17a0:	22 95       	swap	r18
    17a2:	20 7f       	andi	r18, 0xF0	; 240
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9a e0       	ldi	r25, 0x0A	; 10
    17a8:	69 2f       	mov	r22, r25
    17aa:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    17ae:	89 2f       	mov	r24, r25
    17b0:	82 0f       	add	r24, r18
    17b2:	8a 83       	std	Y+2, r24	; 0x02
		Time_Arr[1]=((Mins/10)<<4)+Mins%10;
    17b4:	8f 81       	ldd	r24, Y+7	; 0x07
    17b6:	9a e0       	ldi	r25, 0x0A	; 10
    17b8:	69 2f       	mov	r22, r25
    17ba:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    17be:	28 2f       	mov	r18, r24
    17c0:	22 95       	swap	r18
    17c2:	20 7f       	andi	r18, 0xF0	; 240
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	9a e0       	ldi	r25, 0x0A	; 10
    17c8:	69 2f       	mov	r22, r25
    17ca:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    17ce:	89 2f       	mov	r24, r25
    17d0:	82 0f       	add	r24, r18
    17d2:	8b 83       	std	Y+3, r24	; 0x03
		Time_Arr[2]=((Hrs/10)<<4)+Hrs%10;
    17d4:	88 85       	ldd	r24, Y+8	; 0x08
    17d6:	9a e0       	ldi	r25, 0x0A	; 10
    17d8:	69 2f       	mov	r22, r25
    17da:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    17de:	28 2f       	mov	r18, r24
    17e0:	22 95       	swap	r18
    17e2:	20 7f       	andi	r18, 0xF0	; 240
    17e4:	88 85       	ldd	r24, Y+8	; 0x08
    17e6:	9a e0       	ldi	r25, 0x0A	; 10
    17e8:	69 2f       	mov	r22, r25
    17ea:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    17ee:	89 2f       	mov	r24, r25
    17f0:	82 0f       	add	r24, r18
    17f2:	8c 83       	std	Y+4, r24	; 0x04
		switch(Mode)
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	3a 87       	std	Y+10, r19	; 0x0a
    17fc:	29 87       	std	Y+9, r18	; 0x09
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	51 f0       	breq	.+20     	; 0x181c <RTCDS1307_SET_TIME+0xd8>
    1808:	29 85       	ldd	r18, Y+9	; 0x09
    180a:	3a 85       	ldd	r19, Y+10	; 0x0a
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	61 f0       	breq	.+24     	; 0x182a <RTCDS1307_SET_TIME+0xe6>
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	79 f0       	breq	.+30     	; 0x1838 <RTCDS1307_SET_TIME+0xf4>
    181a:	11 c0       	rjmp	.+34     	; 0x183e <RTCDS1307_SET_TIME+0xfa>
		{
			case MODE_AM:
				CLEAR_BIT(Time_Arr[2],AM_PM_MODE_POS);
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	8f 7d       	andi	r24, 0xDF	; 223
    1820:	8c 83       	std	Y+4, r24	; 0x04
				SET_BIT(Time_Arr[2],TW_TFR_MODE_POS);
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	8c 83       	std	Y+4, r24	; 0x04
    1828:	0a c0       	rjmp	.+20     	; 0x183e <RTCDS1307_SET_TIME+0xfa>
				break;
			case MODE_PM:
				SET_BIT(Time_Arr[2], AM_PM_MODE_POS);
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	80 62       	ori	r24, 0x20	; 32
    182e:	8c 83       	std	Y+4, r24	; 0x04
				SET_BIT(Time_Arr[2], TW_TFR_MODE_POS);
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	80 64       	ori	r24, 0x40	; 64
    1834:	8c 83       	std	Y+4, r24	; 0x04
    1836:	03 c0       	rjmp	.+6      	; 0x183e <RTCDS1307_SET_TIME+0xfa>
				break;
			case MODE_24H:
				CLEAR_BIT(Time_Arr[2],TW_TFR_MODE_POS);
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	8f 7b       	andi	r24, 0xBF	; 191
    183c:	8c 83       	std	Y+4, r24	; 0x04
		}
		E_stat=I2C_WRITE_NBYTES(RTCDS1307_ADD,RTCDS1307_SEC_REG,Time_Arr,3);
    183e:	9e 01       	movw	r18, r28
    1840:	2e 5f       	subi	r18, 0xFE	; 254
    1842:	3f 4f       	sbci	r19, 0xFF	; 255
    1844:	80 ed       	ldi	r24, 0xD0	; 208
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	23 e0       	ldi	r18, 0x03	; 3
    184c:	0e 94 91 04 	call	0x922	; 0x922 <I2C_WRITE_NBYTES>
    1850:	89 83       	std	Y+1, r24	; 0x01
	}
	return E_stat;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
}
    1854:	2a 96       	adiw	r28, 0x0a	; 10
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <RTCDS1307_SET_DATE>:

Bool RTCDS1307_SET_DATE(uint8 Day,uint8 Date,uint8 Month,uint8 Year)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	29 97       	sbiw	r28, 0x09	; 9
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	8e 83       	std	Y+6, r24	; 0x06
    187c:	6f 83       	std	Y+7, r22	; 0x07
    187e:	48 87       	std	Y+8, r20	; 0x08
    1880:	29 87       	std	Y+9, r18	; 0x09
	Bool E_stat=E_OK;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	89 83       	std	Y+1, r24	; 0x01
	uint8 Date_Arr[4]={0};
    1886:	1a 82       	std	Y+2, r1	; 0x02
    1888:	1b 82       	std	Y+3, r1	; 0x03
    188a:	1c 82       	std	Y+4, r1	; 0x04
    188c:	1d 82       	std	Y+5, r1	; 0x05
	if((Date>31||Date<1)||(Month>12||Month<1)||(Year>99))
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	80 32       	cpi	r24, 0x20	; 32
    1892:	60 f4       	brcc	.+24     	; 0x18ac <RTCDS1307_SET_DATE+0x46>
    1894:	8f 81       	ldd	r24, Y+7	; 0x07
    1896:	88 23       	and	r24, r24
    1898:	49 f0       	breq	.+18     	; 0x18ac <RTCDS1307_SET_DATE+0x46>
    189a:	88 85       	ldd	r24, Y+8	; 0x08
    189c:	8d 30       	cpi	r24, 0x0D	; 13
    189e:	30 f4       	brcc	.+12     	; 0x18ac <RTCDS1307_SET_DATE+0x46>
    18a0:	88 85       	ldd	r24, Y+8	; 0x08
    18a2:	88 23       	and	r24, r24
    18a4:	19 f0       	breq	.+6      	; 0x18ac <RTCDS1307_SET_DATE+0x46>
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	84 36       	cpi	r24, 0x64	; 100
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <RTCDS1307_SET_DATE+0x48>
		E_stat=E_NOK;
    18ac:	19 82       	std	Y+1, r1	; 0x01
	if(E_stat==E_OK)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	e1 f5       	brne	.+120    	; 0x192c <RTCDS1307_SET_DATE+0xc6>
	{
		Date_Arr[0]=Day;
    18b4:	8e 81       	ldd	r24, Y+6	; 0x06
    18b6:	8a 83       	std	Y+2, r24	; 0x02
		Date_Arr[1]=((Date/10)<<4)+Date%10;
    18b8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ba:	9a e0       	ldi	r25, 0x0A	; 10
    18bc:	69 2f       	mov	r22, r25
    18be:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    18c2:	28 2f       	mov	r18, r24
    18c4:	22 95       	swap	r18
    18c6:	20 7f       	andi	r18, 0xF0	; 240
    18c8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ca:	9a e0       	ldi	r25, 0x0A	; 10
    18cc:	69 2f       	mov	r22, r25
    18ce:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    18d2:	89 2f       	mov	r24, r25
    18d4:	82 0f       	add	r24, r18
    18d6:	8b 83       	std	Y+3, r24	; 0x03
		Date_Arr[2]=((Month/10)<<4)+Month%10;
    18d8:	88 85       	ldd	r24, Y+8	; 0x08
    18da:	9a e0       	ldi	r25, 0x0A	; 10
    18dc:	69 2f       	mov	r22, r25
    18de:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    18e2:	28 2f       	mov	r18, r24
    18e4:	22 95       	swap	r18
    18e6:	20 7f       	andi	r18, 0xF0	; 240
    18e8:	88 85       	ldd	r24, Y+8	; 0x08
    18ea:	9a e0       	ldi	r25, 0x0A	; 10
    18ec:	69 2f       	mov	r22, r25
    18ee:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    18f2:	89 2f       	mov	r24, r25
    18f4:	82 0f       	add	r24, r18
    18f6:	8c 83       	std	Y+4, r24	; 0x04
		Date_Arr[3]=((Year/10)<<4)+Year%10;
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a e0       	ldi	r25, 0x0A	; 10
    18fc:	69 2f       	mov	r22, r25
    18fe:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    1902:	28 2f       	mov	r18, r24
    1904:	22 95       	swap	r18
    1906:	20 7f       	andi	r18, 0xF0	; 240
    1908:	89 85       	ldd	r24, Y+9	; 0x09
    190a:	9a e0       	ldi	r25, 0x0A	; 10
    190c:	69 2f       	mov	r22, r25
    190e:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodqi4>
    1912:	89 2f       	mov	r24, r25
    1914:	82 0f       	add	r24, r18
    1916:	8d 83       	std	Y+5, r24	; 0x05
		E_stat=I2C_WRITE_NBYTES(RTCDS1307_ADD, RTCDS1307_DAY_REG, Date_Arr, 4);
    1918:	9e 01       	movw	r18, r28
    191a:	2e 5f       	subi	r18, 0xFE	; 254
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	80 ed       	ldi	r24, 0xD0	; 208
    1920:	63 e0       	ldi	r22, 0x03	; 3
    1922:	a9 01       	movw	r20, r18
    1924:	24 e0       	ldi	r18, 0x04	; 4
    1926:	0e 94 91 04 	call	0x922	; 0x922 <I2C_WRITE_NBYTES>
    192a:	89 83       	std	Y+1, r24	; 0x01
	}
	return E_stat;
    192c:	89 81       	ldd	r24, Y+1	; 0x01
}
    192e:	29 96       	adiw	r28, 0x09	; 9
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <RTCDS1307_GET_TIME>:

Bool RTCDS1307_GET_TIME(uint8 *Time_Buff)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <RTCDS1307_GET_TIME+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <RTCDS1307_GET_TIME+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
	Bool E_stat=E_OK;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Temp;
	E_stat=I2C_READ_NBYTES(RTCDS1307_ADD,RTCDS1307_SEC_REG,Time_Buff,3);
    1954:	2b 81       	ldd	r18, Y+3	; 0x03
    1956:	3c 81       	ldd	r19, Y+4	; 0x04
    1958:	80 ed       	ldi	r24, 0xD0	; 208
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	a9 01       	movw	r20, r18
    195e:	23 e0       	ldi	r18, 0x03	; 3
    1960:	0e 94 29 06 	call	0xc52	; 0xc52 <I2C_READ_NBYTES>
    1964:	8a 83       	std	Y+2, r24	; 0x02
	Time_Buff[0]=(Temp>>4)*10+(Time_Buff[0]&0x0F);
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	82 95       	swap	r24
    196a:	8f 70       	andi	r24, 0x0F	; 15
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9c 01       	movw	r18, r24
    1972:	22 0f       	add	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	c9 01       	movw	r24, r18
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	82 0f       	add	r24, r18
    1982:	93 1f       	adc	r25, r19
    1984:	98 2f       	mov	r25, r24
    1986:	eb 81       	ldd	r30, Y+3	; 0x03
    1988:	fc 81       	ldd	r31, Y+4	; 0x04
    198a:	80 81       	ld	r24, Z
    198c:	8f 70       	andi	r24, 0x0F	; 15
    198e:	89 0f       	add	r24, r25
    1990:	eb 81       	ldd	r30, Y+3	; 0x03
    1992:	fc 81       	ldd	r31, Y+4	; 0x04
    1994:	80 83       	st	Z, r24
	Time_Buff[1]=((Time_Buff[1])>>4)*10+(Time_Buff[1]&0xF);
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	dc 01       	movw	r26, r24
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	fc 01       	movw	r30, r24
    19a4:	31 96       	adiw	r30, 0x01	; 1
    19a6:	80 81       	ld	r24, Z
    19a8:	82 95       	swap	r24
    19aa:	8f 70       	andi	r24, 0x0F	; 15
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9c 01       	movw	r18, r24
    19b2:	22 0f       	add	r18, r18
    19b4:	33 1f       	adc	r19, r19
    19b6:	c9 01       	movw	r24, r18
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	82 0f       	add	r24, r18
    19c2:	93 1f       	adc	r25, r19
    19c4:	28 2f       	mov	r18, r24
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	fc 01       	movw	r30, r24
    19cc:	31 96       	adiw	r30, 0x01	; 1
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 70       	andi	r24, 0x0F	; 15
    19d2:	82 0f       	add	r24, r18
    19d4:	8c 93       	st	X, r24
	Temp=Time_Buff[2]&0xE0;
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	fc 01       	movw	r30, r24
    19dc:	32 96       	adiw	r30, 0x02	; 2
    19de:	80 81       	ld	r24, Z
    19e0:	80 7e       	andi	r24, 0xE0	; 224
    19e2:	89 83       	std	Y+1, r24	; 0x01
	Time_Buff[2]&=0x1F;
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	dc 01       	movw	r26, r24
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	fc 01       	movw	r30, r24
    19f2:	32 96       	adiw	r30, 0x02	; 2
    19f4:	80 81       	ld	r24, Z
    19f6:	8f 71       	andi	r24, 0x1F	; 31
    19f8:	8c 93       	st	X, r24
	Time_Buff[2]=((Time_Buff[2])>>4)*10+(Time_Buff[2]&0x0F);
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	dc 01       	movw	r26, r24
    1a00:	12 96       	adiw	r26, 0x02	; 2
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	fc 01       	movw	r30, r24
    1a08:	32 96       	adiw	r30, 0x02	; 2
    1a0a:	80 81       	ld	r24, Z
    1a0c:	82 95       	swap	r24
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9c 01       	movw	r18, r24
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	82 0f       	add	r24, r18
    1a26:	93 1f       	adc	r25, r19
    1a28:	28 2f       	mov	r18, r24
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	fc 01       	movw	r30, r24
    1a30:	32 96       	adiw	r30, 0x02	; 2
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 70       	andi	r24, 0x0F	; 15
    1a36:	82 0f       	add	r24, r18
    1a38:	8c 93       	st	X, r24
	return E_stat;
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <RTCDS1307_GET_DATE>:

Bool RTCDS1307_GET_DATE(uint8 *Date_Buff)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <RTCDS1307_GET_DATE+0x6>
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	8a 83       	std	Y+2, r24	; 0x02
	Bool E_stat=E_OK;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	E_stat=I2C_READ_NBYTES(RTCDS1307_ADD,RTCDS1307_DAY_REG,Date_Buff,4);
    1a5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a60:	3b 81       	ldd	r19, Y+3	; 0x03
    1a62:	80 ed       	ldi	r24, 0xD0	; 208
    1a64:	63 e0       	ldi	r22, 0x03	; 3
    1a66:	a9 01       	movw	r20, r18
    1a68:	24 e0       	ldi	r18, 0x04	; 4
    1a6a:	0e 94 29 06 	call	0xc52	; 0xc52 <I2C_READ_NBYTES>
    1a6e:	89 83       	std	Y+1, r24	; 0x01
	*Date_Buff=*Date_Buff&0x07;
    1a70:	ea 81       	ldd	r30, Y+2	; 0x02
    1a72:	fb 81       	ldd	r31, Y+3	; 0x03
    1a74:	80 81       	ld	r24, Z
    1a76:	87 70       	andi	r24, 0x07	; 7
    1a78:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7c:	80 83       	st	Z, r24
	*(Date_Buff+1)=(*(Date_Buff+1)>>4)*10+*(Date_Buff+1);
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	dc 01       	movw	r26, r24
    1a84:	11 96       	adiw	r26, 0x01	; 1
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	31 96       	adiw	r30, 0x01	; 1
    1a8e:	80 81       	ld	r24, Z
    1a90:	82 95       	swap	r24
    1a92:	8f 70       	andi	r24, 0x0F	; 15
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9c 01       	movw	r18, r24
    1a9a:	22 0f       	add	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	c9 01       	movw	r24, r18
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	82 0f       	add	r24, r18
    1aaa:	93 1f       	adc	r25, r19
    1aac:	28 2f       	mov	r18, r24
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	31 96       	adiw	r30, 0x01	; 1
    1ab6:	80 81       	ld	r24, Z
    1ab8:	82 0f       	add	r24, r18
    1aba:	8c 93       	st	X, r24
	*(Date_Buff+2)=(*(Date_Buff+2)>>4)*10+*(Date_Buff+2);
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac8:	fc 01       	movw	r30, r24
    1aca:	32 96       	adiw	r30, 0x02	; 2
    1acc:	80 81       	ld	r24, Z
    1ace:	82 95       	swap	r24
    1ad0:	8f 70       	andi	r24, 0x0F	; 15
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9c 01       	movw	r18, r24
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	c9 01       	movw	r24, r18
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	82 0f       	add	r24, r18
    1ae8:	93 1f       	adc	r25, r19
    1aea:	28 2f       	mov	r18, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	fc 01       	movw	r30, r24
    1af2:	32 96       	adiw	r30, 0x02	; 2
    1af4:	80 81       	ld	r24, Z
    1af6:	82 0f       	add	r24, r18
    1af8:	8c 93       	st	X, r24
	*(Date_Buff+3)=(*(Date_Buff+3)>>4)*10+*(Date_Buff+3);
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	dc 01       	movw	r26, r24
    1b00:	13 96       	adiw	r26, 0x03	; 3
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	9b 81       	ldd	r25, Y+3	; 0x03
    1b06:	fc 01       	movw	r30, r24
    1b08:	33 96       	adiw	r30, 0x03	; 3
    1b0a:	80 81       	ld	r24, Z
    1b0c:	82 95       	swap	r24
    1b0e:	8f 70       	andi	r24, 0x0F	; 15
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9c 01       	movw	r18, r24
    1b16:	22 0f       	add	r18, r18
    1b18:	33 1f       	adc	r19, r19
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	28 2f       	mov	r18, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2e:	fc 01       	movw	r30, r24
    1b30:	33 96       	adiw	r30, 0x03	; 3
    1b32:	80 81       	ld	r24, Z
    1b34:	82 0f       	add	r24, r18
    1b36:	8c 93       	st	X, r24
	return E_stat;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <RTCDS1307_TIME_STR>:

Bool RTCDS1307_TIME_STR(uint8 *Time_Buff)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	27 97       	sbiw	r28, 0x07	; 7
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	9f 83       	std	Y+7, r25	; 0x07
    1b5c:	8e 83       	std	Y+6, r24	; 0x06
	Bool E_stat = E_OK;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	8a 83       	std	Y+2, r24	; 0x02
	Bool Hrs_flag=0;
    1b62:	19 82       	std	Y+1, r1	; 0x01
	uint8 Temp_Time_Buff[3];
	E_stat = I2C_READ_NBYTES(RTCDS1307_ADD, RTCDS1307_SEC_REG,Temp_Time_Buff, 3);
    1b64:	9e 01       	movw	r18, r28
    1b66:	2d 5f       	subi	r18, 0xFD	; 253
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	80 ed       	ldi	r24, 0xD0	; 208
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	a9 01       	movw	r20, r18
    1b70:	23 e0       	ldi	r18, 0x03	; 3
    1b72:	0e 94 29 06 	call	0xc52	; 0xc52 <I2C_READ_NBYTES>
    1b76:	8a 83       	std	Y+2, r24	; 0x02
	if(BIT_IS_SET(Temp_Time_Buff[2],TW_TFR_MODE_POS))
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	82 95       	swap	r24
    1b7c:	86 95       	lsr	r24
    1b7e:	86 95       	lsr	r24
    1b80:	83 70       	andi	r24, 0x03	; 3
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	81 70       	andi	r24, 0x01	; 1
    1b88:	90 70       	andi	r25, 0x00	; 0
    1b8a:	88 23       	and	r24, r24
    1b8c:	49 f1       	breq	.+82     	; 0x1be0 <RTCDS1307_TIME_STR+0x9a>
	{
		Time_Buff[0]=ZERO+((Temp_Time_Buff[2]&0x10)>>4);
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	80 71       	andi	r24, 0x10	; 16
    1b96:	90 70       	andi	r25, 0x00	; 0
    1b98:	95 95       	asr	r25
    1b9a:	87 95       	ror	r24
    1b9c:	95 95       	asr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	95 95       	asr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	95 95       	asr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	80 5d       	subi	r24, 0xD0	; 208
    1baa:	ee 81       	ldd	r30, Y+6	; 0x06
    1bac:	ff 81       	ldd	r31, Y+7	; 0x07
    1bae:	80 83       	st	Z, r24
		Time_Buff[1]=ZERO+(Temp_Time_Buff[2]&0x0F);
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	31 96       	adiw	r30, 0x01	; 1
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	8f 70       	andi	r24, 0x0F	; 15
    1bbc:	80 5d       	subi	r24, 0xD0	; 208
    1bbe:	80 83       	st	Z, r24
		if(BIT_IS_SET(Temp_Time_Buff[2],AM_PM_MODE_POS))
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	82 95       	swap	r24
    1bc4:	86 95       	lsr	r24
    1bc6:	87 70       	andi	r24, 0x07	; 7
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	81 70       	andi	r24, 0x01	; 1
    1bce:	90 70       	andi	r25, 0x00	; 0
    1bd0:	88 23       	and	r24, r24
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <RTCDS1307_TIME_STR+0x94>
			Hrs_flag=1;//PM
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	1c c0       	rjmp	.+56     	; 0x1c12 <RTCDS1307_TIME_STR+0xcc>
		else
			Hrs_flag=2;//AM
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	19 c0       	rjmp	.+50     	; 0x1c12 <RTCDS1307_TIME_STR+0xcc>
	}
	else
	{
		Time_Buff[0]=ZERO+((Temp_Time_Buff[2]&0x30)>>4);
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	80 73       	andi	r24, 0x30	; 48
    1be8:	90 70       	andi	r25, 0x00	; 0
    1bea:	95 95       	asr	r25
    1bec:	87 95       	ror	r24
    1bee:	95 95       	asr	r25
    1bf0:	87 95       	ror	r24
    1bf2:	95 95       	asr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	95 95       	asr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	80 5d       	subi	r24, 0xD0	; 208
    1bfc:	ee 81       	ldd	r30, Y+6	; 0x06
    1bfe:	ff 81       	ldd	r31, Y+7	; 0x07
    1c00:	80 83       	st	Z, r24
		Time_Buff[1]=ZERO+(Temp_Time_Buff[2]&0x0F);
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	9f 81       	ldd	r25, Y+7	; 0x07
    1c06:	fc 01       	movw	r30, r24
    1c08:	31 96       	adiw	r30, 0x01	; 1
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	8f 70       	andi	r24, 0x0F	; 15
    1c0e:	80 5d       	subi	r24, 0xD0	; 208
    1c10:	80 83       	st	Z, r24
	}
	Time_Buff[2] = ':';
    1c12:	8e 81       	ldd	r24, Y+6	; 0x06
    1c14:	9f 81       	ldd	r25, Y+7	; 0x07
    1c16:	fc 01       	movw	r30, r24
    1c18:	32 96       	adiw	r30, 0x02	; 2
    1c1a:	8a e3       	ldi	r24, 0x3A	; 58
    1c1c:	80 83       	st	Z, r24
	Time_Buff[3] = ZERO + (Temp_Time_Buff[1] >> 4);
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	fc 01       	movw	r30, r24
    1c24:	33 96       	adiw	r30, 0x03	; 3
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	82 95       	swap	r24
    1c2a:	8f 70       	andi	r24, 0x0F	; 15
    1c2c:	80 5d       	subi	r24, 0xD0	; 208
    1c2e:	80 83       	st	Z, r24
	Time_Buff[4] = ZERO + (Temp_Time_Buff[1] & 0x0F);
    1c30:	8e 81       	ldd	r24, Y+6	; 0x06
    1c32:	9f 81       	ldd	r25, Y+7	; 0x07
    1c34:	fc 01       	movw	r30, r24
    1c36:	34 96       	adiw	r30, 0x04	; 4
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	8f 70       	andi	r24, 0x0F	; 15
    1c3c:	80 5d       	subi	r24, 0xD0	; 208
    1c3e:	80 83       	st	Z, r24
	Time_Buff[5] = ':';
    1c40:	8e 81       	ldd	r24, Y+6	; 0x06
    1c42:	9f 81       	ldd	r25, Y+7	; 0x07
    1c44:	fc 01       	movw	r30, r24
    1c46:	35 96       	adiw	r30, 0x05	; 5
    1c48:	8a e3       	ldi	r24, 0x3A	; 58
    1c4a:	80 83       	st	Z, r24
	Time_Buff[6] = ZERO + (Temp_Time_Buff[0] >> 4);
    1c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c50:	fc 01       	movw	r30, r24
    1c52:	36 96       	adiw	r30, 0x06	; 6
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	82 95       	swap	r24
    1c58:	8f 70       	andi	r24, 0x0F	; 15
    1c5a:	80 5d       	subi	r24, 0xD0	; 208
    1c5c:	80 83       	st	Z, r24
	Time_Buff[7] = ZERO + (Temp_Time_Buff[0] & 0x0F);
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	9f 81       	ldd	r25, Y+7	; 0x07
    1c62:	fc 01       	movw	r30, r24
    1c64:	37 96       	adiw	r30, 0x07	; 7
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	8f 70       	andi	r24, 0x0F	; 15
    1c6a:	80 5d       	subi	r24, 0xD0	; 208
    1c6c:	80 83       	st	Z, r24
	if(Hrs_flag==1)
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	c1 f4       	brne	.+48     	; 0x1ca4 <RTCDS1307_TIME_STR+0x15e>
	{
		Time_Buff[8] = ' ';
    1c74:	8e 81       	ldd	r24, Y+6	; 0x06
    1c76:	9f 81       	ldd	r25, Y+7	; 0x07
    1c78:	fc 01       	movw	r30, r24
    1c7a:	38 96       	adiw	r30, 0x08	; 8
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	80 83       	st	Z, r24
		Time_Buff[9] = 'P';
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	9f 81       	ldd	r25, Y+7	; 0x07
    1c84:	fc 01       	movw	r30, r24
    1c86:	39 96       	adiw	r30, 0x09	; 9
    1c88:	80 e5       	ldi	r24, 0x50	; 80
    1c8a:	80 83       	st	Z, r24
		Time_Buff[10] = 'M';
    1c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c90:	fc 01       	movw	r30, r24
    1c92:	3a 96       	adiw	r30, 0x0a	; 10
    1c94:	8d e4       	ldi	r24, 0x4D	; 77
    1c96:	80 83       	st	Z, r24
		Time_Buff[11] = NULLChar;
    1c98:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	3b 96       	adiw	r30, 0x0b	; 11
    1ca0:	10 82       	st	Z, r1
    1ca2:	20 c0       	rjmp	.+64     	; 0x1ce4 <RTCDS1307_TIME_STR+0x19e>
	}
	else if(Hrs_flag==2)
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	c1 f4       	brne	.+48     	; 0x1cda <RTCDS1307_TIME_STR+0x194>
	{
		Time_Buff[8] = ' ';
    1caa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cac:	9f 81       	ldd	r25, Y+7	; 0x07
    1cae:	fc 01       	movw	r30, r24
    1cb0:	38 96       	adiw	r30, 0x08	; 8
    1cb2:	80 e2       	ldi	r24, 0x20	; 32
    1cb4:	80 83       	st	Z, r24
		Time_Buff[9] = 'A';
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cba:	fc 01       	movw	r30, r24
    1cbc:	39 96       	adiw	r30, 0x09	; 9
    1cbe:	81 e4       	ldi	r24, 0x41	; 65
    1cc0:	80 83       	st	Z, r24
		Time_Buff[10] = 'M';
    1cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	3a 96       	adiw	r30, 0x0a	; 10
    1cca:	8d e4       	ldi	r24, 0x4D	; 77
    1ccc:	80 83       	st	Z, r24
		Time_Buff[11] = NULLChar;
    1cce:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	3b 96       	adiw	r30, 0x0b	; 11
    1cd6:	10 82       	st	Z, r1
    1cd8:	05 c0       	rjmp	.+10     	; 0x1ce4 <RTCDS1307_TIME_STR+0x19e>
	}
	else{
		Time_Buff[8] = NULLChar;
    1cda:	8e 81       	ldd	r24, Y+6	; 0x06
    1cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cde:	fc 01       	movw	r30, r24
    1ce0:	38 96       	adiw	r30, 0x08	; 8
    1ce2:	10 82       	st	Z, r1
	}
	return E_stat;
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ce6:	27 96       	adiw	r28, 0x07	; 7
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <Strcpy>:

static void Strcpy(uint8 *Dest,int8 *Src)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <Strcpy+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <Strcpy+0x8>
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9b 83       	std	Y+3, r25	; 0x03
    1d08:	8a 83       	std	Y+2, r24	; 0x02
    1d0a:	7d 83       	std	Y+5, r23	; 0x05
    1d0c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Cnt=0;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    1d10:	15 c0       	rjmp	.+42     	; 0x1d3c <Strcpy+0x44>
	while(*(Src+Cnt)!='\0')
	{
		*(Dest+Cnt)=*(Src+Cnt);
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	a2 0f       	add	r26, r18
    1d20:	b3 1f       	adc	r27, r19
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	e2 0f       	add	r30, r18
    1d30:	f3 1f       	adc	r31, r19
    1d32:	80 81       	ld	r24, Z
    1d34:	8c 93       	st	X, r24
		Cnt++;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	89 83       	std	Y+1, r24	; 0x01
}

static void Strcpy(uint8 *Dest,int8 *Src)
{
	uint8 Cnt=0;
	while(*(Src+Cnt)!='\0')
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 23       	and	r24, r24
    1d50:	01 f7       	brne	.-64     	; 0x1d12 <Strcpy+0x1a>
	{
		*(Dest+Cnt)=*(Src+Cnt);
		Cnt++;
	}
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <RTCDS1307_DATE_STR>:

Bool RTCDS1307_DATE_STR(uint8 *Date_Buff)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	29 97       	sbiw	r28, 0x09	; 9
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	9f 83       	std	Y+7, r25	; 0x07
    1d78:	8e 83       	std	Y+6, r24	; 0x06
	Bool E_stat = E_OK;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
	uint8 Temp_Date_Buff[4];
	E_stat = I2C_READ_NBYTES(RTCDS1307_ADD, RTCDS1307_DAY_REG, Temp_Date_Buff, 4);
    1d7e:	9e 01       	movw	r18, r28
    1d80:	2e 5f       	subi	r18, 0xFE	; 254
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	80 ed       	ldi	r24, 0xD0	; 208
    1d86:	63 e0       	ldi	r22, 0x03	; 3
    1d88:	a9 01       	movw	r20, r18
    1d8a:	24 e0       	ldi	r18, 0x04	; 4
    1d8c:	0e 94 29 06 	call	0xc52	; 0xc52 <I2C_READ_NBYTES>
    1d90:	89 83       	std	Y+1, r24	; 0x01
	Date_Buff[0]=ZERO+(Temp_Date_Buff[1]>>4);
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	82 95       	swap	r24
    1d96:	8f 70       	andi	r24, 0x0F	; 15
    1d98:	80 5d       	subi	r24, 0xD0	; 208
    1d9a:	ee 81       	ldd	r30, Y+6	; 0x06
    1d9c:	ff 81       	ldd	r31, Y+7	; 0x07
    1d9e:	80 83       	st	Z, r24
	Date_Buff[1]=ZERO+(Temp_Date_Buff[1]&0x0F);
    1da0:	8e 81       	ldd	r24, Y+6	; 0x06
    1da2:	9f 81       	ldd	r25, Y+7	; 0x07
    1da4:	fc 01       	movw	r30, r24
    1da6:	31 96       	adiw	r30, 0x01	; 1
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	8f 70       	andi	r24, 0x0F	; 15
    1dac:	80 5d       	subi	r24, 0xD0	; 208
    1dae:	80 83       	st	Z, r24
	Date_Buff[2]='/';
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	9f 81       	ldd	r25, Y+7	; 0x07
    1db4:	fc 01       	movw	r30, r24
    1db6:	32 96       	adiw	r30, 0x02	; 2
    1db8:	8f e2       	ldi	r24, 0x2F	; 47
    1dba:	80 83       	st	Z, r24
	Date_Buff[3] = ZERO + (Temp_Date_Buff[2] >> 4);
    1dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	33 96       	adiw	r30, 0x03	; 3
    1dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc6:	82 95       	swap	r24
    1dc8:	8f 70       	andi	r24, 0x0F	; 15
    1dca:	80 5d       	subi	r24, 0xD0	; 208
    1dcc:	80 83       	st	Z, r24
	Date_Buff[4] = ZERO + (Temp_Date_Buff[2] & 0x0F);
    1dce:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	34 96       	adiw	r30, 0x04	; 4
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	8f 70       	andi	r24, 0x0F	; 15
    1dda:	80 5d       	subi	r24, 0xD0	; 208
    1ddc:	80 83       	st	Z, r24
	Date_Buff[5] = '/';
    1dde:	8e 81       	ldd	r24, Y+6	; 0x06
    1de0:	9f 81       	ldd	r25, Y+7	; 0x07
    1de2:	fc 01       	movw	r30, r24
    1de4:	35 96       	adiw	r30, 0x05	; 5
    1de6:	8f e2       	ldi	r24, 0x2F	; 47
    1de8:	80 83       	st	Z, r24
	Date_Buff[6] = '2';
    1dea:	8e 81       	ldd	r24, Y+6	; 0x06
    1dec:	9f 81       	ldd	r25, Y+7	; 0x07
    1dee:	fc 01       	movw	r30, r24
    1df0:	36 96       	adiw	r30, 0x06	; 6
    1df2:	82 e3       	ldi	r24, 0x32	; 50
    1df4:	80 83       	st	Z, r24
	Date_Buff[7] = '0';
    1df6:	8e 81       	ldd	r24, Y+6	; 0x06
    1df8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	37 96       	adiw	r30, 0x07	; 7
    1dfe:	80 e3       	ldi	r24, 0x30	; 48
    1e00:	80 83       	st	Z, r24
	Date_Buff[8] = ZERO + (Temp_Date_Buff[3] >> 4);
    1e02:	8e 81       	ldd	r24, Y+6	; 0x06
    1e04:	9f 81       	ldd	r25, Y+7	; 0x07
    1e06:	fc 01       	movw	r30, r24
    1e08:	38 96       	adiw	r30, 0x08	; 8
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	82 95       	swap	r24
    1e0e:	8f 70       	andi	r24, 0x0F	; 15
    1e10:	80 5d       	subi	r24, 0xD0	; 208
    1e12:	80 83       	st	Z, r24
	Date_Buff[9] = ZERO + (Temp_Date_Buff[3] & 0x0F);
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	fc 01       	movw	r30, r24
    1e1a:	39 96       	adiw	r30, 0x09	; 9
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	8f 70       	andi	r24, 0x0F	; 15
    1e20:	80 5d       	subi	r24, 0xD0	; 208
    1e22:	80 83       	st	Z, r24
	switch(Temp_Date_Buff[0])
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	39 87       	std	Y+9, r19	; 0x09
    1e2c:	28 87       	std	Y+8, r18	; 0x08
    1e2e:	88 85       	ldd	r24, Y+8	; 0x08
    1e30:	99 85       	ldd	r25, Y+9	; 0x09
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	91 05       	cpc	r25, r1
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <RTCDS1307_DATE_STR+0xd8>
    1e38:	40 c0       	rjmp	.+128    	; 0x1eba <RTCDS1307_DATE_STR+0x158>
    1e3a:	28 85       	ldd	r18, Y+8	; 0x08
    1e3c:	39 85       	ldd	r19, Y+9	; 0x09
    1e3e:	25 30       	cpi	r18, 0x05	; 5
    1e40:	31 05       	cpc	r19, r1
    1e42:	84 f4       	brge	.+32     	; 0x1e64 <RTCDS1307_DATE_STR+0x102>
    1e44:	88 85       	ldd	r24, Y+8	; 0x08
    1e46:	99 85       	ldd	r25, Y+9	; 0x09
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	21 f1       	breq	.+72     	; 0x1e96 <RTCDS1307_DATE_STR+0x134>
    1e4e:	28 85       	ldd	r18, Y+8	; 0x08
    1e50:	39 85       	ldd	r19, Y+9	; 0x09
    1e52:	23 30       	cpi	r18, 0x03	; 3
    1e54:	31 05       	cpc	r19, r1
    1e56:	44 f5       	brge	.+80     	; 0x1ea8 <RTCDS1307_DATE_STR+0x146>
    1e58:	88 85       	ldd	r24, Y+8	; 0x08
    1e5a:	99 85       	ldd	r25, Y+9	; 0x09
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	91 05       	cpc	r25, r1
    1e60:	89 f0       	breq	.+34     	; 0x1e84 <RTCDS1307_DATE_STR+0x122>
    1e62:	4e c0       	rjmp	.+156    	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
    1e64:	28 85       	ldd	r18, Y+8	; 0x08
    1e66:	39 85       	ldd	r19, Y+9	; 0x09
    1e68:	26 30       	cpi	r18, 0x06	; 6
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	c1 f1       	breq	.+112    	; 0x1ede <RTCDS1307_DATE_STR+0x17c>
    1e6e:	88 85       	ldd	r24, Y+8	; 0x08
    1e70:	99 85       	ldd	r25, Y+9	; 0x09
    1e72:	86 30       	cpi	r24, 0x06	; 6
    1e74:	91 05       	cpc	r25, r1
    1e76:	54 f1       	brlt	.+84     	; 0x1ecc <RTCDS1307_DATE_STR+0x16a>
    1e78:	28 85       	ldd	r18, Y+8	; 0x08
    1e7a:	39 85       	ldd	r19, Y+9	; 0x09
    1e7c:	27 30       	cpi	r18, 0x07	; 7
    1e7e:	31 05       	cpc	r19, r1
    1e80:	b9 f1       	breq	.+110    	; 0x1ef0 <RTCDS1307_DATE_STR+0x18e>
    1e82:	3e c0       	rjmp	.+124    	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
	{
		case SUNDAY:
			Strcpy(Date_Buff+10," Sun");
    1e84:	8e 81       	ldd	r24, Y+6	; 0x06
    1e86:	9f 81       	ldd	r25, Y+7	; 0x07
    1e88:	0a 96       	adiw	r24, 0x0a	; 10
    1e8a:	20 e6       	ldi	r18, 0x60	; 96
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	b9 01       	movw	r22, r18
    1e90:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Strcpy>
    1e94:	35 c0       	rjmp	.+106    	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
			break;
		case MONDAY:
			Strcpy(Date_Buff+10," Mon");
    1e96:	8e 81       	ldd	r24, Y+6	; 0x06
    1e98:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9a:	0a 96       	adiw	r24, 0x0a	; 10
    1e9c:	25 e6       	ldi	r18, 0x65	; 101
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	b9 01       	movw	r22, r18
    1ea2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Strcpy>
    1ea6:	2c c0       	rjmp	.+88     	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
			break;
		case TUESDAY:
			Strcpy(Date_Buff+10," Tue");
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1eac:	0a 96       	adiw	r24, 0x0a	; 10
    1eae:	2a e6       	ldi	r18, 0x6A	; 106
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	b9 01       	movw	r22, r18
    1eb4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Strcpy>
    1eb8:	23 c0       	rjmp	.+70     	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
			break;
		case WEDNESDAY:
			Strcpy(Date_Buff+10," Wed");
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebe:	0a 96       	adiw	r24, 0x0a	; 10
    1ec0:	2f e6       	ldi	r18, 0x6F	; 111
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	b9 01       	movw	r22, r18
    1ec6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Strcpy>
    1eca:	1a c0       	rjmp	.+52     	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
			break;
		case THURSDAY:
			Strcpy(Date_Buff+10," Thur");
    1ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ece:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed0:	0a 96       	adiw	r24, 0x0a	; 10
    1ed2:	24 e7       	ldi	r18, 0x74	; 116
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	b9 01       	movw	r22, r18
    1ed8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Strcpy>
    1edc:	11 c0       	rjmp	.+34     	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
			break;
		case FRIDAY:
			Strcpy(Date_Buff+10," Fri");
    1ede:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee2:	0a 96       	adiw	r24, 0x0a	; 10
    1ee4:	2a e7       	ldi	r18, 0x7A	; 122
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	b9 01       	movw	r22, r18
    1eea:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Strcpy>
    1eee:	08 c0       	rjmp	.+16     	; 0x1f00 <RTCDS1307_DATE_STR+0x19e>
			break;
		case SATURDAY:
			Strcpy(Date_Buff+10," Sat");
    1ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef4:	0a 96       	adiw	r24, 0x0a	; 10
    1ef6:	2f e7       	ldi	r18, 0x7F	; 127
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <Strcpy>
			break;
	}
	return E_stat;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f02:	29 96       	adiw	r28, 0x09	; 9
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <SPI_CLK_SET>:
 */

#include "SPI.h"

static Bool SPI_CLK_SET(SPI_CONFIG_t *Spi)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <SPI_CLK_SET+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <SPI_CLK_SET+0x8>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	9b 83       	std	Y+3, r25	; 0x03
    1f24:	8a 83       	std	Y+2, r24	; 0x02
	Bool ret=E_OK;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
	switch(Spi->CLK_set)
    1f2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f2e:	81 81       	ldd	r24, Z+1	; 0x01
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	3d 83       	std	Y+5, r19	; 0x05
    1f36:	2c 83       	std	Y+4, r18	; 0x04
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	91 05       	cpc	r25, r1
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <SPI_CLK_SET+0x30>
    1f42:	70 c0       	rjmp	.+224    	; 0x2024 <SPI_CLK_SET+0x110>
    1f44:	2c 81       	ldd	r18, Y+4	; 0x04
    1f46:	3d 81       	ldd	r19, Y+5	; 0x05
    1f48:	24 30       	cpi	r18, 0x04	; 4
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	84 f4       	brge	.+32     	; 0x1f6e <SPI_CLK_SET+0x5a>
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	9d 81       	ldd	r25, Y+5	; 0x05
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	91 05       	cpc	r25, r1
    1f56:	d1 f1       	breq	.+116    	; 0x1fcc <SPI_CLK_SET+0xb8>
    1f58:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5c:	22 30       	cpi	r18, 0x02	; 2
    1f5e:	31 05       	cpc	r19, r1
    1f60:	0c f0       	brlt	.+2      	; 0x1f64 <SPI_CLK_SET+0x50>
    1f62:	4a c0       	rjmp	.+148    	; 0x1ff8 <SPI_CLK_SET+0xe4>
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	d1 f0       	breq	.+52     	; 0x1fa0 <SPI_CLK_SET+0x8c>
    1f6c:	c9 c0       	rjmp	.+402    	; 0x2100 <SPI_CLK_SET+0x1ec>
    1f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f70:	3d 81       	ldd	r19, Y+5	; 0x05
    1f72:	25 30       	cpi	r18, 0x05	; 5
    1f74:	31 05       	cpc	r19, r1
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <SPI_CLK_SET+0x66>
    1f78:	81 c0       	rjmp	.+258    	; 0x207c <SPI_CLK_SET+0x168>
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7e:	85 30       	cpi	r24, 0x05	; 5
    1f80:	91 05       	cpc	r25, r1
    1f82:	0c f4       	brge	.+2      	; 0x1f86 <SPI_CLK_SET+0x72>
    1f84:	65 c0       	rjmp	.+202    	; 0x2050 <SPI_CLK_SET+0x13c>
    1f86:	2c 81       	ldd	r18, Y+4	; 0x04
    1f88:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8a:	26 30       	cpi	r18, 0x06	; 6
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <SPI_CLK_SET+0x7e>
    1f90:	8b c0       	rjmp	.+278    	; 0x20a8 <SPI_CLK_SET+0x194>
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	9d 81       	ldd	r25, Y+5	; 0x05
    1f96:	87 30       	cpi	r24, 0x07	; 7
    1f98:	91 05       	cpc	r25, r1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <SPI_CLK_SET+0x8a>
    1f9c:	9b c0       	rjmp	.+310    	; 0x20d4 <SPI_CLK_SET+0x1c0>
    1f9e:	b0 c0       	rjmp	.+352    	; 0x2100 <SPI_CLK_SET+0x1ec>
	{
	case SPI_FOSC_4:
		CLEAR_BIT(SPCR, SPR0);
    1fa0:	ad e2       	ldi	r26, 0x2D	; 45
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	ed e2       	ldi	r30, 0x2D	; 45
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8e 7f       	andi	r24, 0xFE	; 254
    1fac:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    1fae:	ad e2       	ldi	r26, 0x2D	; 45
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	ed e2       	ldi	r30, 0x2D	; 45
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8d 7f       	andi	r24, 0xFD	; 253
    1fba:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    1fbc:	ae e2       	ldi	r26, 0x2E	; 46
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	ee e2       	ldi	r30, 0x2E	; 46
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8e 7f       	andi	r24, 0xFE	; 254
    1fc8:	8c 93       	st	X, r24
    1fca:	9b c0       	rjmp	.+310    	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	case SPI_FOSC_16:
		SET_BIT(SPCR, SPR0);
    1fcc:	ad e2       	ldi	r26, 0x2D	; 45
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	ed e2       	ldi	r30, 0x2D	; 45
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	81 60       	ori	r24, 0x01	; 1
    1fd8:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    1fda:	ad e2       	ldi	r26, 0x2D	; 45
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	ed e2       	ldi	r30, 0x2D	; 45
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8d 7f       	andi	r24, 0xFD	; 253
    1fe6:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    1fe8:	ae e2       	ldi	r26, 0x2E	; 46
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	ee e2       	ldi	r30, 0x2E	; 46
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8e 7f       	andi	r24, 0xFE	; 254
    1ff4:	8c 93       	st	X, r24
    1ff6:	85 c0       	rjmp	.+266    	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	case SPI_FOSC_64:
		CLEAR_BIT(SPCR, SPR0);
    1ff8:	ad e2       	ldi	r26, 0x2D	; 45
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	ed e2       	ldi	r30, 0x2D	; 45
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	8e 7f       	andi	r24, 0xFE	; 254
    2004:	8c 93       	st	X, r24
		SET_BIT(SPCR, SPR1);
    2006:	ad e2       	ldi	r26, 0x2D	; 45
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	ed e2       	ldi	r30, 0x2D	; 45
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	82 60       	ori	r24, 0x02	; 2
    2012:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    2014:	ae e2       	ldi	r26, 0x2E	; 46
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	ee e2       	ldi	r30, 0x2E	; 46
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	8e 7f       	andi	r24, 0xFE	; 254
    2020:	8c 93       	st	X, r24
    2022:	6f c0       	rjmp	.+222    	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	case SPI_FOSC_128:
		SET_BIT(SPCR, SPR0);
    2024:	ad e2       	ldi	r26, 0x2D	; 45
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ed e2       	ldi	r30, 0x2D	; 45
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	81 60       	ori	r24, 0x01	; 1
    2030:	8c 93       	st	X, r24
		SET_BIT(SPCR, SPR1);
    2032:	ad e2       	ldi	r26, 0x2D	; 45
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ed e2       	ldi	r30, 0x2D	; 45
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	82 60       	ori	r24, 0x02	; 2
    203e:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
    2040:	ae e2       	ldi	r26, 0x2E	; 46
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	ee e2       	ldi	r30, 0x2E	; 46
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8e 7f       	andi	r24, 0xFE	; 254
    204c:	8c 93       	st	X, r24
    204e:	59 c0       	rjmp	.+178    	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	case SPI_FOSC_2:
		CLEAR_BIT(SPCR, SPR0);
    2050:	ad e2       	ldi	r26, 0x2D	; 45
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	ed e2       	ldi	r30, 0x2D	; 45
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8e 7f       	andi	r24, 0xFE	; 254
    205c:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    205e:	ad e2       	ldi	r26, 0x2D	; 45
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	ed e2       	ldi	r30, 0x2D	; 45
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8d 7f       	andi	r24, 0xFD	; 253
    206a:	8c 93       	st	X, r24
		SET_BIT(SPSR, SPI2X);
    206c:	ae e2       	ldi	r26, 0x2E	; 46
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ee e2       	ldi	r30, 0x2E	; 46
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	81 60       	ori	r24, 0x01	; 1
    2078:	8c 93       	st	X, r24
    207a:	43 c0       	rjmp	.+134    	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	case SPI_FOSC_8:
		SET_BIT(SPCR, SPR0);
    207c:	ad e2       	ldi	r26, 0x2D	; 45
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	ed e2       	ldi	r30, 0x2D	; 45
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	81 60       	ori	r24, 0x01	; 1
    2088:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
    208a:	ad e2       	ldi	r26, 0x2D	; 45
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	ed e2       	ldi	r30, 0x2D	; 45
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	8d 7f       	andi	r24, 0xFD	; 253
    2096:	8c 93       	st	X, r24
		SET_BIT(SPSR, SPI2X);
    2098:	ae e2       	ldi	r26, 0x2E	; 46
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	ee e2       	ldi	r30, 0x2E	; 46
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	81 60       	ori	r24, 0x01	; 1
    20a4:	8c 93       	st	X, r24
    20a6:	2d c0       	rjmp	.+90     	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	case SPI_FOSC_32:
		CLEAR_BIT(SPCR, SPR0);
    20a8:	ad e2       	ldi	r26, 0x2D	; 45
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ed e2       	ldi	r30, 0x2D	; 45
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8e 7f       	andi	r24, 0xFE	; 254
    20b4:	8c 93       	st	X, r24
		SET_BIT(SPCR, SPR1);
    20b6:	ad e2       	ldi	r26, 0x2D	; 45
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	ed e2       	ldi	r30, 0x2D	; 45
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	82 60       	ori	r24, 0x02	; 2
    20c2:	8c 93       	st	X, r24
		SET_BIT(SPSR, SPI2X);
    20c4:	ae e2       	ldi	r26, 0x2E	; 46
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	ee e2       	ldi	r30, 0x2E	; 46
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	8c 93       	st	X, r24
    20d2:	17 c0       	rjmp	.+46     	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	case SPI_FOSC_64_D:
		SET_BIT(SPCR, SPR0);
    20d4:	ad e2       	ldi	r26, 0x2D	; 45
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	ed e2       	ldi	r30, 0x2D	; 45
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	81 60       	ori	r24, 0x01	; 1
    20e0:	8c 93       	st	X, r24
		SET_BIT(SPCR, SPR1);
    20e2:	ad e2       	ldi	r26, 0x2D	; 45
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ed e2       	ldi	r30, 0x2D	; 45
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	82 60       	ori	r24, 0x02	; 2
    20ee:	8c 93       	st	X, r24
		SET_BIT(SPSR, SPI2X);
    20f0:	ae e2       	ldi	r26, 0x2E	; 46
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ee e2       	ldi	r30, 0x2E	; 46
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	81 60       	ori	r24, 0x01	; 1
    20fc:	8c 93       	st	X, r24
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <SPI_CLK_SET+0x1ee>
		break;
	default:
		ret=E_NOK;
    2100:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    2102:	89 81       	ldd	r24, Y+1	; 0x01
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <SPI_INIT>:
Bool SPI_INIT(SPI_CONFIG_t *spi)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	2b 97       	sbiw	r28, 0x0b	; 11
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	9b 83       	std	Y+3, r25	; 0x03
    212a:	8a 83       	std	Y+2, r24	; 0x02
	Bool E_state=E_OK;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==spi)
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	11 f4       	brne	.+4      	; 0x213c <SPI_INIT+0x28>
		E_state=E_NOK;
    2138:	19 82       	std	Y+1, r1	; 0x01
    213a:	af c0       	rjmp	.+350    	; 0x229a <SPI_INIT+0x186>
	else
	{
		SPI_DISABLE();
    213c:	ad e2       	ldi	r26, 0x2D	; 45
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	ed e2       	ldi	r30, 0x2D	; 45
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	8f 7b       	andi	r24, 0xBF	; 191
    2148:	8c 93       	st	X, r24
		switch(spi->SPI_MSTR_SLAVE_set)
    214a:	ea 81       	ldd	r30, Y+2	; 0x02
    214c:	fb 81       	ldd	r31, Y+3	; 0x03
    214e:	80 81       	ld	r24, Z
    2150:	81 70       	andi	r24, 0x01	; 1
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	3b 87       	std	Y+11, r19	; 0x0b
    2158:	2a 87       	std	Y+10, r18	; 0x0a
    215a:	8a 85       	ldd	r24, Y+10	; 0x0a
    215c:	9b 85       	ldd	r25, Y+11	; 0x0b
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	d9 f0       	breq	.+54     	; 0x2198 <SPI_INIT+0x84>
    2162:	2a 85       	ldd	r18, Y+10	; 0x0a
    2164:	3b 85       	ldd	r19, Y+11	; 0x0b
    2166:	21 30       	cpi	r18, 0x01	; 1
    2168:	31 05       	cpc	r19, r1
    216a:	29 f5       	brne	.+74     	; 0x21b6 <SPI_INIT+0xa2>
		{
			case SPI_MSTR_MODE:
				SPI_MSTR_MODE_SET();
    216c:	ad e2       	ldi	r26, 0x2D	; 45
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ed e2       	ldi	r30, 0x2D	; 45
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	80 61       	ori	r24, 0x10	; 16
    2178:	8c 93       	st	X, r24
				SPI_PORT_DIR|=(1<<MOSI|1<<SCK|1<<SS);
    217a:	a7 e3       	ldi	r26, 0x37	; 55
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e7 e3       	ldi	r30, 0x37	; 55
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	80 6b       	ori	r24, 0xB0	; 176
    2186:	8c 93       	st	X, r24
				SPI_PORT_DIR = SPI_PORT_DIR & ~(1<<MISO);
    2188:	a7 e3       	ldi	r26, 0x37	; 55
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e7 e3       	ldi	r30, 0x37	; 55
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	8f 7b       	andi	r24, 0xBF	; 191
    2194:	8c 93       	st	X, r24
    2196:	10 c0       	rjmp	.+32     	; 0x21b8 <SPI_INIT+0xa4>
				break;
			case SPI_SLAVE_MODE:
				SPI_SLAVE_MODE_SET();
    2198:	ad e2       	ldi	r26, 0x2D	; 45
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	ed e2       	ldi	r30, 0x2D	; 45
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8f 7e       	andi	r24, 0xEF	; 239
    21a4:	8c 93       	st	X, r24
				SPI_PORT_DIR|=(1<<MISO);
    21a6:	a7 e3       	ldi	r26, 0x37	; 55
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e7 e3       	ldi	r30, 0x37	; 55
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	80 64       	ori	r24, 0x40	; 64
    21b2:	8c 93       	st	X, r24
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <SPI_INIT+0xa4>
				break;
			default:
				E_state=E_NOK;
    21b6:	19 82       	std	Y+1, r1	; 0x01
		}
		switch(spi->SPI_CLOCK_polarity_set)
    21b8:	ea 81       	ldd	r30, Y+2	; 0x02
    21ba:	fb 81       	ldd	r31, Y+3	; 0x03
    21bc:	80 81       	ld	r24, Z
    21be:	86 95       	lsr	r24
    21c0:	86 95       	lsr	r24
    21c2:	86 95       	lsr	r24
    21c4:	81 70       	andi	r24, 0x01	; 1
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	39 87       	std	Y+9, r19	; 0x09
    21cc:	28 87       	std	Y+8, r18	; 0x08
    21ce:	88 85       	ldd	r24, Y+8	; 0x08
    21d0:	99 85       	ldd	r25, Y+9	; 0x09
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	31 f0       	breq	.+12     	; 0x21e2 <SPI_INIT+0xce>
    21d6:	28 85       	ldd	r18, Y+8	; 0x08
    21d8:	39 85       	ldd	r19, Y+9	; 0x09
    21da:	21 30       	cpi	r18, 0x01	; 1
    21dc:	31 05       	cpc	r19, r1
    21de:	49 f0       	breq	.+18     	; 0x21f2 <SPI_INIT+0xde>
    21e0:	10 c0       	rjmp	.+32     	; 0x2202 <SPI_INIT+0xee>
		{
			case CLOCK_POLARITY_RSEDG_FEDG:
				SPI_CLOCK_POLARITY_DISABLE();
    21e2:	ad e2       	ldi	r26, 0x2D	; 45
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	ed e2       	ldi	r30, 0x2D	; 45
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	87 7f       	andi	r24, 0xF7	; 247
    21ee:	8c 93       	st	X, r24
    21f0:	09 c0       	rjmp	.+18     	; 0x2204 <SPI_INIT+0xf0>
				break;
			case CLOCK_POLARITY_FEDG_RSEDG:
				SPI_CLOCK_POLARITY_ENABLE();
    21f2:	ad e2       	ldi	r26, 0x2D	; 45
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ed e2       	ldi	r30, 0x2D	; 45
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	88 60       	ori	r24, 0x08	; 8
    21fe:	8c 93       	st	X, r24
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <SPI_INIT+0xf0>
				break;
			default:
				E_state=E_NOK;
    2202:	19 82       	std	Y+1, r1	; 0x01
		}
		switch(spi->SPI_CLOCK_phase_set)
    2204:	ea 81       	ldd	r30, Y+2	; 0x02
    2206:	fb 81       	ldd	r31, Y+3	; 0x03
    2208:	80 81       	ld	r24, Z
    220a:	86 95       	lsr	r24
    220c:	86 95       	lsr	r24
    220e:	81 70       	andi	r24, 0x01	; 1
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	3f 83       	std	Y+7, r19	; 0x07
    2216:	2e 83       	std	Y+6, r18	; 0x06
    2218:	8e 81       	ldd	r24, Y+6	; 0x06
    221a:	9f 81       	ldd	r25, Y+7	; 0x07
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f0       	breq	.+26     	; 0x223a <SPI_INIT+0x126>
    2220:	2e 81       	ldd	r18, Y+6	; 0x06
    2222:	3f 81       	ldd	r19, Y+7	; 0x07
    2224:	21 30       	cpi	r18, 0x01	; 1
    2226:	31 05       	cpc	r19, r1
    2228:	81 f4       	brne	.+32     	; 0x224a <SPI_INIT+0x136>
		{
			case CLOCK_PHASE_SAMPLE_LEADING:
				SPI_CLOCK_PHASE_ENABLE();
    222a:	ad e2       	ldi	r26, 0x2D	; 45
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ed e2       	ldi	r30, 0x2D	; 45
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	84 60       	ori	r24, 0x04	; 4
    2236:	8c 93       	st	X, r24
    2238:	09 c0       	rjmp	.+18     	; 0x224c <SPI_INIT+0x138>
				break;
			case CLOCK_PHASE_SAMPLE_TRAILING:
				SPI_CLOCK_PHASE_DISABLE();
    223a:	ad e2       	ldi	r26, 0x2D	; 45
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	ed e2       	ldi	r30, 0x2D	; 45
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8b 7f       	andi	r24, 0xFB	; 251
    2246:	8c 93       	st	X, r24
    2248:	01 c0       	rjmp	.+2      	; 0x224c <SPI_INIT+0x138>
				break;
			default:
				E_state=E_NOK;
    224a:	19 82       	std	Y+1, r1	; 0x01
		}
		switch(spi->SPI_Shift_dir_set)
    224c:	ea 81       	ldd	r30, Y+2	; 0x02
    224e:	fb 81       	ldd	r31, Y+3	; 0x03
    2250:	80 81       	ld	r24, Z
    2252:	86 95       	lsr	r24
    2254:	81 70       	andi	r24, 0x01	; 1
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	3d 83       	std	Y+5, r19	; 0x05
    225c:	2c 83       	std	Y+4, r18	; 0x04
    225e:	8c 81       	ldd	r24, Y+4	; 0x04
    2260:	9d 81       	ldd	r25, Y+5	; 0x05
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	31 f0       	breq	.+12     	; 0x2272 <SPI_INIT+0x15e>
    2266:	2c 81       	ldd	r18, Y+4	; 0x04
    2268:	3d 81       	ldd	r19, Y+5	; 0x05
    226a:	21 30       	cpi	r18, 0x01	; 1
    226c:	31 05       	cpc	r19, r1
    226e:	49 f0       	breq	.+18     	; 0x2282 <SPI_INIT+0x16e>
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <SPI_INIT+0x17c>
		{
			case MSB_FIRST_SHIFT:
				SPI_MSB_FIRST();
    2272:	ad e2       	ldi	r26, 0x2D	; 45
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	ed e2       	ldi	r30, 0x2D	; 45
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8f 7d       	andi	r24, 0xDF	; 223
    227e:	8c 93       	st	X, r24
    2280:	07 c0       	rjmp	.+14     	; 0x2290 <SPI_INIT+0x17c>
				break;
			case LSB_FIRST_SHIFT:
				SPI_LSB_FIRST();
    2282:	ad e2       	ldi	r26, 0x2D	; 45
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	ed e2       	ldi	r30, 0x2D	; 45
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	80 62       	ori	r24, 0x20	; 32
    228e:	8c 93       	st	X, r24
				break;
		}
		E_state=SPI_CLK_SET(spi);
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	9b 81       	ldd	r25, Y+3	; 0x03
    2294:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <SPI_CLK_SET>
    2298:	89 83       	std	Y+1, r24	; 0x01
	}
	SPI_ENABLE();
    229a:	ad e2       	ldi	r26, 0x2D	; 45
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	ed e2       	ldi	r30, 0x2D	; 45
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	80 64       	ori	r24, 0x40	; 64
    22a6:	8c 93       	st	X, r24
	return E_state;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
//	SPI_PORT_DIR|=(1<<MOSI|1<<SCK|1<<SS);
//    SPI_PORT_DIR = SPI_PORT_DIR & ~(1<<MISO);
//    SPSR=(1<<SPI2X);
//	SPCR = ((1<<SPE) | (1<<MSTR));// enable SPI + enable Master + choose SPI clock = Fosc/4
//	return E_state;
}
    22aa:	2b 96       	adiw	r28, 0x0b	; 11
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <SPI_SEND_blocking>:

Bool SPI_SEND_blocking(uint8 data)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <SPI_SEND_blocking+0x6>
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	8a 83       	std	Y+2, r24	; 0x02
	Bool E_STAT=E_OK;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	89 83       	std	Y+1, r24	; 0x01
	SPDR=data;
    22cc:	ef e2       	ldi	r30, 0x2F	; 47
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF));
    22d4:	ee e2       	ldi	r30, 0x2E	; 46
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	88 23       	and	r24, r24
    22dc:	dc f7       	brge	.-10     	; 0x22d4 <SPI_SEND_blocking+0x18>
	return E_STAT;
    22de:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <SPI_SEND_string>:

Bool SPI_SEND_string(uint8 *data)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <SPI_SEND_string+0x6>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	9b 83       	std	Y+3, r25	; 0x03
    22f8:	8a 83       	std	Y+2, r24	; 0x02
	Bool E_STAT=E_OK;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	0a c0       	rjmp	.+20     	; 0x2314 <SPI_SEND_string+0x2a>
	while(*data)
	{
		SPI_SEND_blocking(*data);
    2300:	ea 81       	ldd	r30, Y+2	; 0x02
    2302:	fb 81       	ldd	r31, Y+3	; 0x03
    2304:	80 81       	ld	r24, Z
    2306:	0e 94 5e 11 	call	0x22bc	; 0x22bc <SPI_SEND_blocking>
		data++;
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	9b 81       	ldd	r25, Y+3	; 0x03
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	9b 83       	std	Y+3, r25	; 0x03
    2312:	8a 83       	std	Y+2, r24	; 0x02
}

Bool SPI_SEND_string(uint8 *data)
{
	Bool E_STAT=E_OK;
	while(*data)
    2314:	ea 81       	ldd	r30, Y+2	; 0x02
    2316:	fb 81       	ldd	r31, Y+3	; 0x03
    2318:	80 81       	ld	r24, Z
    231a:	88 23       	and	r24, r24
    231c:	89 f7       	brne	.-30     	; 0x2300 <SPI_SEND_string+0x16>
	{
		SPI_SEND_blocking(*data);
		data++;
	}
	return E_STAT;
    231e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <SPI_REC_DATA>:

Bool SPI_REC_DATA(uint8 *data)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <SPI_REC_DATA+0x6>
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	9b 83       	std	Y+3, r25	; 0x03
    233a:	8a 83       	std	Y+2, r24	; 0x02
	Bool E_STAT = E_OK;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(SPSR,SPIF));
    2340:	ee e2       	ldi	r30, 0x2E	; 46
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	88 23       	and	r24, r24
    2348:	dc f7       	brge	.-10     	; 0x2340 <SPI_REC_DATA+0x14>
	*data=SPDR;
    234a:	ef e2       	ldi	r30, 0x2F	; 47
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	ea 81       	ldd	r30, Y+2	; 0x02
    2352:	fb 81       	ldd	r31, Y+3	; 0x03
    2354:	80 83       	st	Z, r24
	return E_STAT;
    2356:	89 81       	ldd	r24, Y+1	; 0x01
}
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <SPI_REC_STRING>:
Bool SPI_REC_STRING(uint8 *data)
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <SPI_REC_STRING+0x6>
    236a:	00 d0       	rcall	.+0      	; 0x236c <SPI_REC_STRING+0x8>
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Bytes_RX=0;
    2374:	1a 82       	std	Y+2, r1	; 0x02
	Bool E_STAT = E_OK;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	89 83       	std	Y+1, r24	; 0x01
	E_STAT=SPI_REC_DATA(data);
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	0e 94 96 11 	call	0x232c	; 0x232c <SPI_REC_DATA>
    2382:	89 83       	std	Y+1, r24	; 0x01
	Bytes_RX++;
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	8f 5f       	subi	r24, 0xFF	; 255
    2388:	8a 83       	std	Y+2, r24	; 0x02
    238a:	0d c0       	rjmp	.+26     	; 0x23a6 <SPI_REC_STRING+0x42>
	while(*(data+Bytes_RX)!='#')
	{
		E_STAT=SPI_REC_DATA(data+Bytes_RX);
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	82 0f       	add	r24, r18
    2398:	93 1f       	adc	r25, r19
    239a:	0e 94 96 11 	call	0x232c	; 0x232c <SPI_REC_DATA>
    239e:	89 83       	std	Y+1, r24	; 0x01
		Bytes_RX++;
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	8f 5f       	subi	r24, 0xFF	; 255
    23a4:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 Bytes_RX=0;
	Bool E_STAT = E_OK;
	E_STAT=SPI_REC_DATA(data);
	Bytes_RX++;
	while(*(data+Bytes_RX)!='#')
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	fc 01       	movw	r30, r24
    23b2:	e2 0f       	add	r30, r18
    23b4:	f3 1f       	adc	r31, r19
    23b6:	80 81       	ld	r24, Z
    23b8:	83 32       	cpi	r24, 0x23	; 35
    23ba:	41 f7       	brne	.-48     	; 0x238c <SPI_REC_STRING+0x28>
	{
		E_STAT=SPI_REC_DATA(data+Bytes_RX);
		Bytes_RX++;
	}
	return E_STAT;
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <main>:
		.SCL_FREQ=I2C_STANDARD_MODE,
		.Prescaler_Freq=TWPS_PRESCALER_1,
};

int main()
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	29 97       	sbiw	r28, 0x09	; 9
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
	uint8 Str_disp[9];
	SPI_INIT(&SPI_t);
    23e0:	81 ed       	ldi	r24, 0xD1	; 209
    23e2:	93 e0       	ldi	r25, 0x03	; 3
    23e4:	0e 94 8a 10 	call	0x2114	; 0x2114 <SPI_INIT>
	I2C_INIT(&I2C_t);
    23e8:	83 ed       	ldi	r24, 0xD3	; 211
    23ea:	93 e0       	ldi	r25, 0x03	; 3
    23ec:	0e 94 3d 03 	call	0x67a	; 0x67a <I2C_INIT>
	MAX7219_INIT_ARR(NO_SEGS);
    23f0:	88 e0       	ldi	r24, 0x08	; 8
    23f2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <MAX7219_INIT_ARR>
	RTCDS1307_SET_TIME(MODE_24H,12,36,5);
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	6c e0       	ldi	r22, 0x0C	; 12
    23fa:	44 e2       	ldi	r20, 0x24	; 36
    23fc:	25 e0       	ldi	r18, 0x05	; 5
    23fe:	0e 94 a2 0b 	call	0x1744	; 0x1744 <RTCDS1307_SET_TIME>
	while(1)
	{
		RTCDS1307_TIME_STR(Str_disp);
    2402:	ce 01       	movw	r24, r28
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <RTCDS1307_TIME_STR>
		Max7219_disp_string(Str_disp);
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	0e 94 05 08 	call	0x100a	; 0x100a <Max7219_disp_string>
    2412:	f7 cf       	rjmp	.-18     	; 0x2402 <main+0x36>

00002414 <__udivmodqi4>:
    2414:	99 1b       	sub	r25, r25
    2416:	79 e0       	ldi	r23, 0x09	; 9
    2418:	04 c0       	rjmp	.+8      	; 0x2422 <__udivmodqi4_ep>

0000241a <__udivmodqi4_loop>:
    241a:	99 1f       	adc	r25, r25
    241c:	96 17       	cp	r25, r22
    241e:	08 f0       	brcs	.+2      	; 0x2422 <__udivmodqi4_ep>
    2420:	96 1b       	sub	r25, r22

00002422 <__udivmodqi4_ep>:
    2422:	88 1f       	adc	r24, r24
    2424:	7a 95       	dec	r23
    2426:	c9 f7       	brne	.-14     	; 0x241a <__udivmodqi4_loop>
    2428:	80 95       	com	r24
    242a:	08 95       	ret

0000242c <__udivmodsi4>:
    242c:	a1 e2       	ldi	r26, 0x21	; 33
    242e:	1a 2e       	mov	r1, r26
    2430:	aa 1b       	sub	r26, r26
    2432:	bb 1b       	sub	r27, r27
    2434:	fd 01       	movw	r30, r26
    2436:	0d c0       	rjmp	.+26     	; 0x2452 <__udivmodsi4_ep>

00002438 <__udivmodsi4_loop>:
    2438:	aa 1f       	adc	r26, r26
    243a:	bb 1f       	adc	r27, r27
    243c:	ee 1f       	adc	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	a2 17       	cp	r26, r18
    2442:	b3 07       	cpc	r27, r19
    2444:	e4 07       	cpc	r30, r20
    2446:	f5 07       	cpc	r31, r21
    2448:	20 f0       	brcs	.+8      	; 0x2452 <__udivmodsi4_ep>
    244a:	a2 1b       	sub	r26, r18
    244c:	b3 0b       	sbc	r27, r19
    244e:	e4 0b       	sbc	r30, r20
    2450:	f5 0b       	sbc	r31, r21

00002452 <__udivmodsi4_ep>:
    2452:	66 1f       	adc	r22, r22
    2454:	77 1f       	adc	r23, r23
    2456:	88 1f       	adc	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	1a 94       	dec	r1
    245c:	69 f7       	brne	.-38     	; 0x2438 <__udivmodsi4_loop>
    245e:	60 95       	com	r22
    2460:	70 95       	com	r23
    2462:	80 95       	com	r24
    2464:	90 95       	com	r25
    2466:	9b 01       	movw	r18, r22
    2468:	ac 01       	movw	r20, r24
    246a:	bd 01       	movw	r22, r26
    246c:	cf 01       	movw	r24, r30
    246e:	08 95       	ret

00002470 <__divmodsi4>:
    2470:	97 fb       	bst	r25, 7
    2472:	09 2e       	mov	r0, r25
    2474:	05 26       	eor	r0, r21
    2476:	0e d0       	rcall	.+28     	; 0x2494 <__divmodsi4_neg1>
    2478:	57 fd       	sbrc	r21, 7
    247a:	04 d0       	rcall	.+8      	; 0x2484 <__divmodsi4_neg2>
    247c:	d7 df       	rcall	.-82     	; 0x242c <__udivmodsi4>
    247e:	0a d0       	rcall	.+20     	; 0x2494 <__divmodsi4_neg1>
    2480:	00 1c       	adc	r0, r0
    2482:	38 f4       	brcc	.+14     	; 0x2492 <__divmodsi4_exit>

00002484 <__divmodsi4_neg2>:
    2484:	50 95       	com	r21
    2486:	40 95       	com	r20
    2488:	30 95       	com	r19
    248a:	21 95       	neg	r18
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	4f 4f       	sbci	r20, 0xFF	; 255
    2490:	5f 4f       	sbci	r21, 0xFF	; 255

00002492 <__divmodsi4_exit>:
    2492:	08 95       	ret

00002494 <__divmodsi4_neg1>:
    2494:	f6 f7       	brtc	.-4      	; 0x2492 <__divmodsi4_exit>
    2496:	90 95       	com	r25
    2498:	80 95       	com	r24
    249a:	70 95       	com	r23
    249c:	61 95       	neg	r22
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	8f 4f       	sbci	r24, 0xFF	; 255
    24a2:	9f 4f       	sbci	r25, 0xFF	; 255
    24a4:	08 95       	ret

000024a6 <__prologue_saves__>:
    24a6:	2f 92       	push	r2
    24a8:	3f 92       	push	r3
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	cf 92       	push	r12
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	ca 1b       	sub	r28, r26
    24d0:	db 0b       	sbc	r29, r27
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	09 94       	ijmp

000024de <__epilogue_restores__>:
    24de:	2a 88       	ldd	r2, Y+18	; 0x12
    24e0:	39 88       	ldd	r3, Y+17	; 0x11
    24e2:	48 88       	ldd	r4, Y+16	; 0x10
    24e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    24f0:	b9 84       	ldd	r11, Y+9	; 0x09
    24f2:	c8 84       	ldd	r12, Y+8	; 0x08
    24f4:	df 80       	ldd	r13, Y+7	; 0x07
    24f6:	ee 80       	ldd	r14, Y+6	; 0x06
    24f8:	fd 80       	ldd	r15, Y+5	; 0x05
    24fa:	0c 81       	ldd	r16, Y+4	; 0x04
    24fc:	1b 81       	ldd	r17, Y+3	; 0x03
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	b9 81       	ldd	r27, Y+1	; 0x01
    2502:	ce 0f       	add	r28, r30
    2504:	d1 1d       	adc	r29, r1
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	ed 01       	movw	r28, r26
    2512:	08 95       	ret

00002514 <_exit>:
    2514:	f8 94       	cli

00002516 <__stop_program>:
    2516:	ff cf       	rjmp	.-2      	; 0x2516 <__stop_program>
